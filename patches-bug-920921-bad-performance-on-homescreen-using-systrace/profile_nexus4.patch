# HG changeset patch
# Parent d21c223f897870c35ae7900db5ddc6217792ded4
# User Jerry Shih <hshih@mozilla.com>
profile nexnus4 for benwa's patch

diff --git a/gfx/layers/ElapsedTimer.cpp b/gfx/layers/ElapsedTimer.cpp
--- a/gfx/layers/ElapsedTimer.cpp
+++ b/gfx/layers/ElapsedTimer.cpp
@@ -1,15 +1,16 @@
 #include <ElapsedTimer.h>
 #include <nsDebug.h>
 
 #include "cutils/properties.h"
 
 static bool CheckTimerEnable(const char *tag,uint32_t level)
 {
+  /*
   char prop[PROPERTY_VALUE_MAX];
 
   property_get("debug.log_enable",prop,"1");
   if(atoi(prop)==0){
     return false;
   }
 
   if(tag!=NULL){
@@ -22,16 +23,17 @@ static bool CheckTimerEnable(const char 
     }
   }
   else{
     property_get("debug.log_level",prop,"9");
     if(atoi(prop)<level){
       return false;
     }
   }
+  */
 
   return true;
 }
 
 static uint32_t GetElapsedMicrosecond(const timespec &start,const timespec &end)
 {
   int64_t diff=(end.tv_sec*1000000000LL+end.tv_nsec)-(start.tv_sec*1000000000LL+start.tv_nsec);
 
diff --git a/gfx/layers/ipc/CompositorParent.cpp b/gfx/layers/ipc/CompositorParent.cpp
--- a/gfx/layers/ipc/CompositorParent.cpp
+++ b/gfx/layers/ipc/CompositorParent.cpp
@@ -46,16 +46,18 @@
 #include "nsXULAppAPI.h"                // for XRE_GetIOMessageLoop
 #ifdef XP_WIN
 #include "mozilla/layers/CompositorD3D11.h"
 #include "mozilla/layers/CompositorD3D9.h"
 #endif
 #include "GeckoProfiler.h"
 #include "mozilla/ipc/ProtocolTypes.h"
 
+#include "ElapsedTimer.h"
+
 using namespace base;
 using namespace mozilla;
 using namespace mozilla::ipc;
 using namespace mozilla::gfx;
 using namespace std;
 
 namespace mozilla {
 namespace layers {
@@ -505,20 +507,26 @@ CompositorParent::ScheduleComposition()
   } else {
     ScheduleTask(mCurrentCompositeTask, 0);
   }
 }
 
 void
 CompositorParent::Composite()
 {
+  static StatisticScopeElapsedTimer timer("bignose profile CompositorParent::Composite");
+  StatisticScopeElapsedTimerHelper timer_helper(timer);
+  timer_helper.Start();
+
   if (CanComposite()) {
     mLayerManager->BeginTransaction();
   }
   CompositeInTransaction();
+
+  timer_helper.End();
 }
 
 void
 CompositorParent::CompositeInTransaction()
 {
   profiler_tracing("Paint", "Composite", TRACING_INTERVAL_START);
   PROFILER_LABEL("CompositorParent", "Composite");
   NS_ABORT_IF_FALSE(CompositorThreadID() == PlatformThread::CurrentId(),
diff --git a/layout/base/RestyleTracker.cpp b/layout/base/RestyleTracker.cpp
--- a/layout/base/RestyleTracker.cpp
+++ b/layout/base/RestyleTracker.cpp
@@ -8,16 +8,18 @@
  * of what nodes restyles need to happen on and so forth.
  */
 
 #include "RestyleTracker.h"
 #include "nsStyleChangeList.h"
 #include "RestyleManager.h"
 #include "GeckoProfiler.h"
 
+#include "ElapsedTimer.h"
+
 namespace mozilla {
 
 inline nsIDocument*
 RestyleTracker::Document() const {
   return mRestyleManager->PresContext()->Document();
 }
 
 #define RESTYLE_ARRAY_STACKSIZE 128
@@ -129,16 +131,21 @@ RestyleTracker::ProcessOneRestyle(Elemen
     changeList.AppendChange(primaryFrame, aElement, aChangeHint);
     mRestyleManager->ProcessRestyledFrames(changeList);
   }
 }
 
 void
 RestyleTracker::DoProcessRestyles()
 {
+  StatisticScopeElapsedTimer timer("bignose profile RestyleTracker::DoProcessRestyles()");
+  StatisticScopeElapsedTimerHelper timer_helper(timer);
+
+  timer_helper.Start();
+
   PROFILER_LABEL("CSS", "ProcessRestyles");
 
   mRestyleManager->BeginProcessingRestyles();
 
   // loop so that we process any restyle events generated by processing
   while (mPendingRestyles.Count()) {
     if (mHaveLaterSiblingRestyles) {
       // Convert them to individual restyles on all the later siblings
@@ -232,16 +239,18 @@ RestyleTracker::DoProcessRestyles()
         ProcessOneRestyle(currentRestyle->mElement,
                           currentRestyle->mRestyleHint,
                           currentRestyle->mChangeHint);
       }
     }
   }
 
   mRestyleManager->EndProcessingRestyles();
+
+  timer_helper.End();
 }
 
 bool
 RestyleTracker::GetRestyleData(Element* aElement, RestyleData* aData)
 {
   NS_PRECONDITION(aElement->GetCurrentDoc() == Document(),
                   "Unexpected document; this will lead to incorrect behavior!");
 
diff --git a/layout/base/nsPresShell.cpp b/layout/base/nsPresShell.cpp
--- a/layout/base/nsPresShell.cpp
+++ b/layout/base/nsPresShell.cpp
@@ -159,16 +159,18 @@
 #include "nsIScreenManager.h"
 #include "nsPlaceholderFrame.h"
 #include "nsTransitionManager.h"
 #include "RestyleManager.h"
 #include "nsIDOMHTMLElement.h"
 #include "nsIDragSession.h"
 #include "nsIFrameInlines.h"
 
+#include "ElapsedTimer.h"
+
 #ifdef ANDROID
 #include "nsIDocShellTreeOwner.h"
 #endif
 
 #define ANCHOR_SCROLL_FLAGS \
   (nsIPresShell::SCROLL_OVERFLOW_HIDDEN | nsIPresShell::SCROLL_NO_PARENT_FRAMES)
 
 using namespace mozilla;
@@ -5725,16 +5727,20 @@ private:
   nsIFrame* mFrame;
 };
 
 void
 PresShell::Paint(nsView*        aViewToPaint,
                  const nsRegion& aDirtyRegion,
                  uint32_t        aFlags)
 {
+  static StatisticScopeElapsedTimer timer("bignose profile PresShell::Paint");
+  StatisticScopeElapsedTimerHelper timer_helper(timer);
+  timer_helper.Start();
+
   PROFILER_LABEL("Paint", "PresShell::Paint");
   NS_ASSERTION(!mIsDestroying, "painting a destroyed PresShell");
   NS_ASSERTION(aViewToPaint, "null view");
 
   MOZ_ASSERT(!mImageVisibilityVisited, "should have been cleared");
 
   if (!mIsActive || mIsZombie) {
     return;
@@ -5850,16 +5856,19 @@ PresShell::Paint(nsView*        aViewToP
       pc->GetVisibleArea().ToOutsidePixels(pc->AppUnitsPerDevPixel());
     bgcolor = NS_ComposeColors(bgcolor, mCanvasBackgroundColor);
     root->SetColor(bgcolor);
     root->SetVisibleRegion(bounds);
     layerManager->SetRoot(root);
   }
   layerManager->EndTransaction(nullptr, nullptr, (aFlags & PAINT_COMPOSITE) ?
     LayerManager::END_DEFAULT : LayerManager::END_NO_COMPOSITE);
+
+
+  timer_helper.End();
 }
 
 // static
 void
 nsIPresShell::SetCapturingContent(nsIContent* aContent, uint8_t aFlags)
 {
   // If capture was set for pointer lock, don't unlock unless we are coming
   // out of pointer lock explicitly.
diff --git a/widget/gonk/libui/InputReader.cpp b/widget/gonk/libui/InputReader.cpp
--- a/widget/gonk/libui/InputReader.cpp
+++ b/widget/gonk/libui/InputReader.cpp
@@ -40,22 +40,25 @@
 // Log debug messages about the vibrator.
 #define DEBUG_VIBRATOR 0
 
 #include "InputReader.h"
 
 #include "Keyboard.h"
 #include "VirtualKeyMap.h"
 
+#include "GeckoProfiler.h"
+
 #include <stddef.h>
 #include <stdlib.h>
 #include <unistd.h>
 #include <errno.h>
 #include <limits.h>
 #include <math.h>
+#include <ElapsedTimer.h>
 
 #define INDENT "  "
 #define INDENT2 "    "
 #define INDENT3 "      "
 #define INDENT4 "        "
 #define INDENT5 "          "
 
 namespace android {
@@ -830,16 +833,21 @@ EventHubInterface* InputReader::ContextI
 InputReaderThread::InputReaderThread(const sp<InputReaderInterface>& reader) :
         Thread(/*canCallJava*/ true), mReader(reader) {
 }
 
 InputReaderThread::~InputReaderThread() {
 }
 
 bool InputReaderThread::threadLoop() {
+    static StatisticFrameElapsedTimer timer("bignose profile InputReaderThread::threadLoop");
+    timer.Update();
+
+    PROFILER_LABEL("InputReaderThread", "threadLoop");
+
     mReader->loopOnce();
     return true;
 }
 
 
 // --- InputDevice ---
 
 InputDevice::InputDevice(InputReaderContext* context, int32_t id, int32_t generation,
