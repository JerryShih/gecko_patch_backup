# HG changeset patch
# Parent 11689b0b239ed77986f5cec700aa6df85134d8ad
# User Jerry Shih <hshih@mozilla.com>
don't use tls for main thread profiler stack

diff --git a/tools/profiler/GeckoProfilerImpl.h b/tools/profiler/GeckoProfilerImpl.h
--- a/tools/profiler/GeckoProfilerImpl.h
+++ b/tools/profiler/GeckoProfilerImpl.h
@@ -13,16 +13,17 @@
 #include <algorithm>
 #include "mozilla/ThreadLocal.h"
 #include "mozilla/Assertions.h"
 #include "nsAlgorithm.h"
 #include "nscore.h"
 #include "GeckoProfilerFunc.h"
 #include "PseudoStack.h"
 #include "nsISupports.h"
+#include "MainThreadUtils.h"
 
 /* QT has a #define for the word "slots" and jsfriendapi.h has a struct with
  * this variable name, causing compilation problems. Alleviate this for now by
  * removing this #define */
 #ifdef MOZ_WIDGET_QT
 #undef slots
 #endif
 
@@ -33,16 +34,19 @@
 
 class TableTicker;
 class JSCustomObject;
 
 namespace mozilla {
 class TimeStamp;
 }
 
+//for main thread
+extern PseudoStack *gPseudoStack;
+//for other thread
 extern mozilla::ThreadLocal<PseudoStack *> tlsPseudoStack;
 extern mozilla::ThreadLocal<TableTicker *> tlsTicker;
 extern mozilla::ThreadLocal<void *> tlsStackTop;
 extern bool stack_key_initialized;
 
 #ifndef SAMPLE_FUNCTION_NAME
 # ifdef __GNUC__
 #  define SAMPLE_FUNCTION_NAME __FUNCTION__
@@ -166,16 +170,17 @@ void profiler_unregister_thread()
 {
   mozilla_sampler_unregister_thread();
 }
 
 static inline
 void profiler_js_operation_callback()
 {
   PseudoStack *stack = tlsPseudoStack.get();
+
   if (!stack) {
     return;
   }
 
   stack->jsOperationCallback();
 }
 
 static inline
@@ -189,16 +194,17 @@ double profiler_time(const mozilla::Time
 {
   return mozilla_sampler_time(aTime);
 }
 
 static inline
 bool profiler_in_privacy_mode()
 {
   PseudoStack *stack = tlsPseudoStack.get();
+
   if (!stack) {
     return false;
   }
   return stack->mPrivacyMode;
 }
 
 static inline void profiler_tracing(const char* aCategory, const char* aInfo,
                                     TracingMetadata aMetaData = TRACING_DEFAULT)
@@ -217,25 +223,25 @@ static inline void profiler_tracing(cons
 
 // we want the class and function name but can't easily get that using preprocessor macros
 // __func__ doesn't have the class name and __PRETTY_FUNCTION__ has the parameters
 
 #define SAMPLER_APPEND_LINE_NUMBER_PASTE(id, line) id ## line
 #define SAMPLER_APPEND_LINE_NUMBER_EXPAND(id, line) SAMPLER_APPEND_LINE_NUMBER_PASTE(id, line)
 #define SAMPLER_APPEND_LINE_NUMBER(id) SAMPLER_APPEND_LINE_NUMBER_EXPAND(id, __LINE__)
 
-#define PROFILER_LABEL(name_space, info) mozilla::SamplerStackFrameRAII SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__)
-#define PROFILER_LABEL_PRINTF(name_space, info, ...) mozilla::SamplerStackFramePrintfRAII SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__, __VA_ARGS__)
+#define PROFILER_LABEL(name_space, info) mozilla::SamplerStackFrameRAII<false> SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__)
+#define PROFILER_LABEL_PRINTF(name_space, info, ...) mozilla::SamplerStackFramePrintfRAII<false> SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__, __VA_ARGS__)
 
 #define PROFILER_MARKER(info) mozilla_sampler_add_marker(info)
 #define PROFILER_MARKER_PAYLOAD(info, payload) mozilla_sampler_add_marker(info, payload)
 #define PROFILER_MAIN_THREAD_MARKER(info)  MOZ_ASSERT(NS_IsMainThread(), "This can only be called on the main thread"); mozilla_sampler_add_marker(info)
 
-#define PROFILER_MAIN_THREAD_LABEL(name_space, info)  MOZ_ASSERT(NS_IsMainThread(), "This can only be called on the main thread"); mozilla::SamplerStackFrameRAII SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__)
-#define PROFILER_MAIN_THREAD_LABEL_PRINTF(name_space, info, ...)  MOZ_ASSERT(NS_IsMainThread(), "This can only be called on the main thread"); mozilla::SamplerStackFramePrintfRAII SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__, __VA_ARGS__)
+#define PROFILER_MAIN_THREAD_LABEL(name_space, info)  MOZ_ASSERT(NS_IsMainThread(), "This can only be called on the main thread"); mozilla::SamplerStackFrameRAII<true> SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__)
+#define PROFILER_MAIN_THREAD_LABEL_PRINTF(name_space, info, ...)  MOZ_ASSERT(NS_IsMainThread(), "This can only be called on the main thread"); mozilla::SamplerStackFramePrintfRAII<true> SAMPLER_APPEND_LINE_NUMBER(sampler_raii)(name_space "::" info, __LINE__, __VA_ARGS__)
 
 
 /* FIXME/bug 789667: memory constraints wouldn't much of a problem for
  * this small a sample buffer size, except that serializing the
  * profile data is extremely, unnecessarily memory intensive. */
 #ifdef MOZ_WIDGET_GONK
 # define PLATFORM_LIKELY_MEMORY_CONSTRAINED
 #endif
@@ -269,32 +275,39 @@ static inline void profiler_tracing(cons
 // enough.
 #define PROFILE_DEFAULT_INTERVAL 1
 #else
 #define PROFILE_DEFAULT_INTERVAL 1
 #endif
 #define PROFILE_DEFAULT_FEATURES NULL
 #define PROFILE_DEFAULT_FEATURE_COUNT 0
 
+template<bool IsMainThread>
+inline void* mozilla_sampler_call_enter(const char *aInfo, void *aFrameAddress,
+                                        bool aCopy, uint32_t line);
+
 namespace mozilla {
 
+template<bool IsMainThread=false>
 class MOZ_STACK_CLASS SamplerStackFrameRAII {
 public:
   // we only copy the strings at save time, so to take multiple parameters we'd need to copy them then.
   SamplerStackFrameRAII(const char *aInfo, uint32_t line) {
-    mHandle = mozilla_sampler_call_enter(aInfo, this, false, line);
+    mHandle = mozilla_sampler_call_enter<IsMainThread>(aInfo, this, false, line);
   }
   ~SamplerStackFrameRAII() {
     mozilla_sampler_call_exit(mHandle);
   }
 private:
   void* mHandle;
 };
 
 static const int SAMPLER_MAX_STRING = 128;
+
+template<bool IsMainThread=false>
 class MOZ_STACK_CLASS SamplerStackFramePrintfRAII {
 public:
   // we only copy the strings at save time, so to take multiple parameters we'd need to copy them then.
   SamplerStackFramePrintfRAII(const char *aDefault, uint32_t line, const char *aFormat, ...) {
     if (profiler_is_active() && !profiler_in_privacy_mode()) {
       va_list args;
       va_start(args, aFormat);
       char buff[SAMPLER_MAX_STRING];
@@ -303,48 +316,65 @@ public:
       // the vargs.
 #if _MSC_VER
       _vsnprintf(buff, SAMPLER_MAX_STRING, aFormat, args);
       _snprintf(mDest, SAMPLER_MAX_STRING, "%s %s", aDefault, buff);
 #else
       ::vsnprintf(buff, SAMPLER_MAX_STRING, aFormat, args);
       ::snprintf(mDest, SAMPLER_MAX_STRING, "%s %s", aDefault, buff);
 #endif
-      mHandle = mozilla_sampler_call_enter(mDest, this, true, line);
+      mHandle = mozilla_sampler_call_enter<IsMainThread>(mDest, this, true, line);
       va_end(args);
     } else {
-      mHandle = mozilla_sampler_call_enter(aDefault, nullptr, false, line);
+      mHandle = mozilla_sampler_call_enter<IsMainThread>(aDefault, nullptr, false, line);
     }
   }
   ~SamplerStackFramePrintfRAII() {
     mozilla_sampler_call_exit(mHandle);
   }
 private:
   char mDest[SAMPLER_MAX_STRING];
   void* mHandle;
 };
 
 } //mozilla
 
-inline PseudoStack* mozilla_get_pseudo_stack(void)
+template<bool IsMainThread=false>
+PseudoStack* mozilla_get_pseudo_stack(void);
+
+template<>
+inline PseudoStack* mozilla_get_pseudo_stack<true>(void)
 {
   if (!stack_key_initialized)
     return nullptr;
+
+  return gPseudoStack;
+}
+
+template<>
+inline PseudoStack* mozilla_get_pseudo_stack<false>(void)
+{
+  if (!stack_key_initialized)
+    return nullptr;
+
   return tlsPseudoStack.get();
 }
 
+template<bool IsMainThread>
 inline void* mozilla_sampler_call_enter(const char *aInfo, void *aFrameAddress,
                                         bool aCopy, uint32_t line)
 {
   // check if we've been initialized to avoid calling pthread_getspecific
   // with a null tlsStack which will return undefined results.
   if (!stack_key_initialized)
     return nullptr;
 
-  PseudoStack *stack = tlsPseudoStack.get();
+  //PseudoStack *stack = tlsPseudoStack.get();
+  PseudoStack *stack = mozilla_get_pseudo_stack<IsMainThread>();
+
   // we can't infer whether 'stack' has been initialized
   // based on the value of stack_key_intiailized because
   // 'stack' is only intialized when a thread is being
   // profiled.
   if (!stack) {
     return stack;
   }
   stack->push(aInfo, aFrameAddress, aCopy, line);
diff --git a/tools/profiler/TableTicker.cpp b/tools/profiler/TableTicker.cpp
--- a/tools/profiler/TableTicker.cpp
+++ b/tools/profiler/TableTicker.cpp
@@ -609,17 +609,19 @@ void TableTicker::InplaceTick(TickSample
     sLastFrameNumber = sFrameNumber;
   }
 }
 
 namespace {
 
 SyncProfile* NewSyncProfile()
 {
-  PseudoStack* stack = tlsPseudoStack.get();
+  //PseudoStack* stack = tlsPseudoStack.get();
+  PseudoStack *stack = mozilla_get_pseudo_stack();
+
   if (!stack) {
     MOZ_ASSERT(stack);
     return nullptr;
   }
   Thread::tid_t tid = Thread::GetCurrentId();
 
   SyncProfile* profile = new SyncProfile("SyncProfile",
                                          GET_BACKTRACE_DEFAULT_ENTRY,
diff --git a/tools/profiler/platform.cpp b/tools/profiler/platform.cpp
--- a/tools/profiler/platform.cpp
+++ b/tools/profiler/platform.cpp
@@ -26,16 +26,18 @@
 #include "ProfilerMarkers.h"
 #include "nsXULAppAPI.h"
 
 #if defined(SPS_OS_android) && !defined(MOZ_WIDGET_GONK)
   #include "AndroidBridge.h"
   using namespace mozilla::widget::android;
 #endif
 
+PseudoStack *gPseudoStack;
+
 mozilla::ThreadLocal<PseudoStack *> tlsPseudoStack;
 mozilla::ThreadLocal<TableTicker *> tlsTicker;
 mozilla::ThreadLocal<void *> tlsStackTop;
 // We need to track whether we've been initialized otherwise
 // we end up using tlsStack without initializing it.
 // Because tlsStack is totally opaque to us we can't reuse
 // it as the flag itself.
 bool stack_key_initialized;
@@ -422,53 +424,79 @@ void set_tls_stack_top(void* stackTop)
   // assumes that no target has a page size smaller than 4096.
   uintptr_t stackTopR = (uintptr_t)stackTop;
   if (stackTop) {
     stackTopR = (stackTopR & ~(uintptr_t)4095) + (uintptr_t)4095;
   }
   tlsStackTop.set((void*)stackTopR);
 }
 
+void set_main_thread_stack_top(void* stackTop)
+{
+  // Round |stackTop| up to the end of the containing page.  We may
+  // as well do this -- there's no danger of a fault, and we might
+  // get a few more base-of-the-stack frames as a result.  This
+  // assumes that no target has a page size smaller than 4096.
+  uintptr_t stackTopR = (uintptr_t)stackTop;
+  if (stackTop) {
+    stackTopR = (stackTopR & ~(uintptr_t)4095) + (uintptr_t)4095;
+  }
+  tlsStackTop.set((void*)stackTopR);
+}
+
 bool is_main_thread_name(const char* aName) {
   if (!aName) {
     return false;
   }
   return strcmp(aName, gGeckoThreadName) == 0;
 }
 
 ////////////////////////////////////////////////////////////////////////
 // BEGIN externally visible functions
 
 void mozilla_sampler_init(void* stackTop)
 {
   sInitCount++;
 
+  printf_stderr("bignose profiler:in mozilla_sampler_init(), tid=%d, init_count=%d",Thread::GetCurrentId(),sInitCount);
+
   if (stack_key_initialized)
     return;
 
+  printf_stderr("bignose profiler:in mozilla_sampler_init() start init, tid=%d, init_count=%d",Thread::GetCurrentId(),sInitCount);
+
+
   LOG("BEGIN mozilla_sampler_init");
   if (!tlsPseudoStack.init() || !tlsTicker.init() || !tlsStackTop.init()) {
     LOG("Failed to init.");
     return;
   }
   stack_key_initialized = true;
 
   Sampler::Startup();
 
+  //for PROFILER_MAIN_THREAD* label
+  gPseudoStack = new PseudoStack();
+  //for non PROFILER_MAIN_THREAD* label
   PseudoStack *stack = new PseudoStack();
   tlsPseudoStack.set(stack);
 
   bool isMainThread = true;
 #ifdef XP_WIN
   // For metrofx, we'll register the main thread once it's created.
   isMainThread = !(XRE_GetWindowsEnvironment() == WindowsEnvironmentType_Metro);
 #endif
+  //for PROFILER_MAIN_THREAD* label
   Sampler::RegisterCurrentThread(isMainThread ?
                                    gGeckoThreadName : "Application Thread",
-                                 stack, isMainThread, stackTop);
+                                   gPseudoStack, isMainThread, stackTop);
+  //for non PROFILER_MAIN_THREAD* label
+  Sampler::RegisterCurrentThread(isMainThread ?
+                                   gGeckoThreadName : "Application Thread",
+                                   stack, isMainThread, stackTop);
 
   // Read mode settings from MOZ_PROFILER_MODE and interval
   // settings from MOZ_PROFILER_INTERVAL and stack-scan threshhold
   // from MOZ_PROFILER_STACK_SCAN.
   read_profiler_env_vars();
 
   // Allow the profiler to be started using signals
   OS::RegisterStartHandler();
@@ -717,17 +745,19 @@ void mozilla_sampler_stop()
     uwt__stop();
   }
 
   t->Stop();
   delete t;
   tlsTicker.set(nullptr);
 
   if (disableJS) {
-    PseudoStack *stack = tlsPseudoStack.get();
+    //PseudoStack *stack = tlsPseudoStack.get();
+    PseudoStack *stack = mozilla_get_pseudo_stack();
+
     ASSERT(stack != nullptr);
     stack->disableJSSampling();
   }
 
   if (unwinderThreader) {
     uwt__deinit();
   }
 
@@ -804,24 +834,29 @@ bool mozilla_sampler_register_thread(con
   if (!profiler_is_active()) {
     return false;
   }
 #endif
 
   PseudoStack* stack = new PseudoStack();
   tlsPseudoStack.set(stack);
   bool isMainThread = is_main_thread_name(aName);
+
+  printf_stderr("bignose profiler:in mozilla_sampler_register_thread(), tid=%d, init_count=%d",Thread::GetCurrentId(),sInitCount);
+
   return Sampler::RegisterCurrentThread(aName, stack, isMainThread, stackTop);
 }
 
 void mozilla_sampler_unregister_thread()
 {
   Sampler::UnregisterCurrentThread();
 
-  PseudoStack *stack = tlsPseudoStack.get();
+  //PseudoStack *stack = tlsPseudoStack.get();
+  PseudoStack *stack = mozilla_get_pseudo_stack();
+
   if (!stack) {
     return;
   }
   delete stack;
   tlsPseudoStack.set(nullptr);
 }
 
 double mozilla_sampler_time(const TimeStamp& aTime)
@@ -887,17 +922,18 @@ void mozilla_sampler_add_marker(const ch
     return;
   }
 
   // Don't add a marker if we don't want to include personal information
   if (profiler_in_privacy_mode()) {
     return;
   }
 
-  PseudoStack *stack = tlsPseudoStack.get();
+  //PseudoStack *stack = tlsPseudoStack.get();
+  PseudoStack *stack = mozilla_get_pseudo_stack();
   if (!stack) {
     return;
   }
   stack->addMarker(aMarker, payload.forget());
 }
 
 // END externally visible functions
 ////////////////////////////////////////////////////////////////////////
