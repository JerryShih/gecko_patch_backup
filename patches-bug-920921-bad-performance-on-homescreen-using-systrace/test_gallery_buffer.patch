# HG changeset patch
# Parent cef901fbb48ca973b501b74a7eb464852233ac1a
# User Jerry Shih <hshih@mozilla.com>
test canvas buffer usage for gallery app

diff --git a/content/canvas/src/WebGLContext.cpp b/content/canvas/src/WebGLContext.cpp
--- a/content/canvas/src/WebGLContext.cpp
+++ b/content/canvas/src/WebGLContext.cpp
@@ -1189,16 +1189,18 @@ WebGLContext::PresentScreenBuffer()
     }
 
     if (!mOptions.preserveDrawingBuffer) {
         ClearScreen();
     }
 
     mShouldPresent = false;
 
+    printf_stderr("bignose call WebGLContext::PresentScreenBuffer()");
+
     return true;
 }
 
 void
 WebGLContext::DummyFramebufferOperation(const char *info)
 {
     GLenum status = CheckFramebufferStatus(LOCAL_GL_FRAMEBUFFER);
     if (status == LOCAL_GL_FRAMEBUFFER_COMPLETE)
diff --git a/gfx/gl/SharedSurfaceGralloc.cpp b/gfx/gl/SharedSurfaceGralloc.cpp
--- a/gfx/gl/SharedSurfaceGralloc.cpp
+++ b/gfx/gl/SharedSurfaceGralloc.cpp
@@ -138,16 +138,18 @@ SharedSurface_Gralloc::~SharedSurface_Gr
     mGL->MakeCurrent();
     mGL->fDeleteTextures(1, (GLuint*)&mProdTex);
 
     SurfaceDescriptor desc(mDesc);
 
     if (mAllocator) {
         mAllocator->DestroySharedSurface(&desc);
     }
+
+    printf_stderr("bignose gralloc remove surface:(%d,%d)",mTexSize.width,mTexSize.height);
 }
 
 void
 SharedSurface_Gralloc::Fence()
 {
     // We should be able to rely on genlock write locks/read locks.
     // But they're broken on some configs, and even a glFinish doesn't
     // work.  glReadPixels seems to, though.
diff --git a/gfx/gl/SharedSurfaceGralloc.h b/gfx/gl/SharedSurfaceGralloc.h
--- a/gfx/gl/SharedSurfaceGralloc.h
+++ b/gfx/gl/SharedSurfaceGralloc.h
@@ -46,33 +46,39 @@ protected:
     // explicitly destroy this descriptor (and thus deallocate the
     // actor) it in the destructor of this class.  This is okay to do
     // on the client, but is very bad to do on the server (because on
     // the client, the actor has no chance of going away unless the
     // whole app died).
     layers::SurfaceDescriptorGralloc mDesc;
     const GLuint mProdTex;
 
+    gfxIntSize mTexSize;
+
     SharedSurface_Gralloc(GLContext* prodGL,
                           const gfxIntSize& size,
                           bool hasAlpha,
                           GLLibraryEGL* egl,
                           layers::ISurfaceAllocator* allocator,
                           layers::SurfaceDescriptorGralloc& desc,
                           GLuint prodTex)
         : SharedSurface_GL(SharedSurfaceType::Gralloc,
                            AttachmentType::GLTexture,
                            prodGL,
                            size,
                            hasAlpha)
         , mEGL(egl)
         , mAllocator(allocator)
         , mDesc(desc)
         , mProdTex(prodTex)
-    {}
+    {
+      mTexSize=size;
+
+      printf_stderr("bignose gralloc surface:(%d,%d)",mTexSize.width,mTexSize.height);
+    }
 
     static bool HasExtensions(GLLibraryEGL* egl, GLContext* gl);
 
 public:
     virtual ~SharedSurface_Gralloc();
 
     virtual void Fence();
     virtual bool WaitSync();
diff --git a/js/xpconnect/src/XPCDebug.cpp b/js/xpconnect/src/XPCDebug.cpp
--- a/js/xpconnect/src/XPCDebug.cpp
+++ b/js/xpconnect/src/XPCDebug.cpp
@@ -24,17 +24,18 @@ static void DebugDump(const char* fmt, .
 #endif
   buffer[sizeof(buffer)-1] = '\0';
   va_end(ap);
 #ifdef XP_WIN
   if (IsDebuggerPresent()) {
     OutputDebugStringA(buffer);
   }
 #endif
-  printf("%s", buffer);
+  //printf("%s", buffer);
+  printf_stderr("%s", buffer);
 }
 
 bool
 xpc_DumpJSStack(JSContext* cx, bool showArgs, bool showLocals, bool showThisProps)
 {
     if (char* buf = xpc_PrintJSStack(cx, showArgs, showLocals, showThisProps)) {
         DebugDump("%s\n", buf);
         JS_smprintf_free(buf);
