# HG changeset patch
# Parent eadadd0747ab3e1882051e52876a539776d216a0
# User Jerry Shih <hshih@mozilla.com>
add vsync top protocol

diff --git a/dom/ipc/ContentChild.cpp b/dom/ipc/ContentChild.cpp
--- a/dom/ipc/ContentChild.cpp
+++ b/dom/ipc/ContentChild.cpp
@@ -32,16 +32,17 @@
 #include "mozilla/ipc/BackgroundChild.h"
 #include "mozilla/ipc/FileDescriptorUtils.h"
 #include "mozilla/ipc/GeckoChildProcessHost.h"
 #include "mozilla/ipc/TestShellChild.h"
 #include "mozilla/layers/CompositorChild.h"
 #include "mozilla/layers/ImageBridgeChild.h"
 #include "mozilla/layers/PCompositorChild.h"
 #include "mozilla/layers/SharedBufferManagerChild.h"
+#include "mozilla/layers/VsyncEventChild.h"
 #include "mozilla/net/NeckoChild.h"
 
 #if defined(MOZ_CONTENT_SANDBOX)
 #if defined(XP_WIN)
 #define TARGET_SANDBOX_EXPORTS
 #include "mozilla/sandboxTarget.h"
 #elif defined(XP_LINUX)
 #include "mozilla/Sandbox.h"
@@ -883,21 +884,28 @@ PCompositorChild*
 ContentChild::AllocPCompositorChild(mozilla::ipc::Transport* aTransport,
                                     base::ProcessId aOtherProcess)
 {
     return CompositorChild::Create(aTransport, aOtherProcess);
 }
 
 PSharedBufferManagerChild*
 ContentChild::AllocPSharedBufferManagerChild(mozilla::ipc::Transport* aTransport,
-                                              base::ProcessId aOtherProcess)
+                                             base::ProcessId aOtherProcess)
 {
     return SharedBufferManagerChild::StartUpInChildProcess(aTransport, aOtherProcess);
 }
 
+PVsyncEventChild*
+ContentChild::AllocPVsyncEventChild(mozilla::ipc::Transport* aTransport,
+                                    base::ProcessId aOtherProcess)
+{
+    return VsyncEventChild::Create(aTransport, aOtherProcess);
+}
+
 PImageBridgeChild*
 ContentChild::AllocPImageBridgeChild(mozilla::ipc::Transport* aTransport,
                                      base::ProcessId aOtherProcess)
 {
     return ImageBridgeChild::StartUpInChildProcess(aTransport, aOtherProcess);
 }
 
 PBackgroundChild*
diff --git a/dom/ipc/ContentChild.h b/dom/ipc/ContentChild.h
--- a/dom/ipc/ContentChild.h
+++ b/dom/ipc/ContentChild.h
@@ -106,17 +106,21 @@ public:
                              base::ProcessId otherProcess) MOZ_OVERRIDE;
 
     PCompositorChild*
     AllocPCompositorChild(mozilla::ipc::Transport* aTransport,
                           base::ProcessId aOtherProcess) MOZ_OVERRIDE;
 
     PSharedBufferManagerChild*
     AllocPSharedBufferManagerChild(mozilla::ipc::Transport* aTransport,
-                                    base::ProcessId aOtherProcess) MOZ_OVERRIDE;
+                                   base::ProcessId aOtherProcess) MOZ_OVERRIDE;
+
+    PVsyncEventChild*
+    AllocPVsyncEventChild(mozilla::ipc::Transport* aTransport,
+                          base::ProcessId aOtherProcess) MOZ_OVERRIDE;
 
     PImageBridgeChild*
     AllocPImageBridgeChild(mozilla::ipc::Transport* aTransport,
                            base::ProcessId aOtherProcess) MOZ_OVERRIDE;
 
     virtual bool RecvSetProcessSandbox() MOZ_OVERRIDE;
 
     PBackgroundChild*
diff --git a/dom/ipc/ContentParent.cpp b/dom/ipc/ContentParent.cpp
--- a/dom/ipc/ContentParent.cpp
+++ b/dom/ipc/ContentParent.cpp
@@ -56,16 +56,17 @@
 #include "mozilla/ipc/BackgroundChild.h"
 #include "mozilla/ipc/BackgroundParent.h"
 #include "mozilla/ipc/FileDescriptorUtils.h"
 #include "mozilla/ipc/TestShellParent.h"
 #include "mozilla/ipc/InputStreamUtils.h"
 #include "mozilla/layers/CompositorParent.h"
 #include "mozilla/layers/ImageBridgeParent.h"
 #include "mozilla/layers/SharedBufferManagerParent.h"
+#include "mozilla/layers/VsyncEventParent.h"
 #include "mozilla/net/NeckoParent.h"
 #include "mozilla/Preferences.h"
 #include "mozilla/Services.h"
 #include "mozilla/StaticPtr.h"
 #include "mozilla/unused.h"
 #include "nsAnonymousTemporaryFile.h"
 #include "nsAppRunner.h"
 #include "nsAutoPtr.h"
@@ -1899,16 +1900,19 @@ ContentParent::InitInternal(ProcessPrior
             }
         }
     }
 #ifdef MOZ_WIDGET_GONK
     DebugOnly<bool> opened = PSharedBufferManager::Open(this);
     MOZ_ASSERT(opened);
 #endif
 
+    DebugOnly<bool> vsyncOpened = PVsyncEvent::Open(this);
+    MOZ_ASSERT(vsyncOpened);
+
     if (aSendRegisteredChrome) {
         nsCOMPtr<nsIChromeRegistry> registrySvc = nsChromeRegistry::GetService();
         nsChromeRegistryChrome* chromeRegistry =
             static_cast<nsChromeRegistryChrome*>(registrySvc.get());
         chromeRegistry->SendRegisteredChrome(this);
     }
 
     if (gAppData) {
@@ -2539,21 +2543,28 @@ PBackgroundParent*
 ContentParent::AllocPBackgroundParent(Transport* aTransport,
                                       ProcessId aOtherProcess)
 {
     return BackgroundParent::Alloc(this, aTransport, aOtherProcess);
 }
 
 PSharedBufferManagerParent*
 ContentParent::AllocPSharedBufferManagerParent(mozilla::ipc::Transport* aTransport,
-                                                base::ProcessId aOtherProcess)
+                                               base::ProcessId aOtherProcess)
 {
     return SharedBufferManagerParent::Create(aTransport, aOtherProcess);
 }
 
+PVsyncEventParent*
+ContentParent::AllocPVsyncEventParent(mozilla::ipc::Transport* aTransport,
+                                      base::ProcessId aOtherProcess)
+{
+    return VsyncEventParent::Create(aTransport, aOtherProcess);
+}
+
 bool
 ContentParent::RecvGetProcessAttributes(uint64_t* aId,
                                         bool* aIsForApp, bool* aIsForBrowser)
 {
     *aId = mChildID;
     *aIsForApp = IsForApp();
     *aIsForBrowser = mIsForBrowser;
 
diff --git a/dom/ipc/ContentParent.h b/dom/ipc/ContentParent.h
--- a/dom/ipc/ContentParent.h
+++ b/dom/ipc/ContentParent.h
@@ -369,20 +369,22 @@ private:
     void ShutDownMessageManager();
 
     PCompositorParent*
     AllocPCompositorParent(mozilla::ipc::Transport* aTransport,
                            base::ProcessId aOtherProcess) MOZ_OVERRIDE;
     PImageBridgeParent*
     AllocPImageBridgeParent(mozilla::ipc::Transport* aTransport,
                             base::ProcessId aOtherProcess) MOZ_OVERRIDE;
-
     PSharedBufferManagerParent*
     AllocPSharedBufferManagerParent(mozilla::ipc::Transport* aTranport,
-                                     base::ProcessId aOtherProcess) MOZ_OVERRIDE;
+                                    base::ProcessId aOtherProcess) MOZ_OVERRIDE;
+    PVsyncEventParent*
+    AllocPVsyncEventParent(mozilla::ipc::Transport* aTranport,
+                           base::ProcessId aOtherProcess) MOZ_OVERRIDE;
     PBackgroundParent*
     AllocPBackgroundParent(Transport* aTransport, ProcessId aOtherProcess)
                            MOZ_OVERRIDE;
 
     virtual bool RecvGetProcessAttributes(uint64_t* aId,
                                           bool* aIsForApp,
                                           bool* aIsForBrowser) MOZ_OVERRIDE;
     virtual bool RecvGetXPCOMProcessAttributes(bool* aIsOffline) MOZ_OVERRIDE;
diff --git a/dom/ipc/PContent.ipdl b/dom/ipc/PContent.ipdl
--- a/dom/ipc/PContent.ipdl
+++ b/dom/ipc/PContent.ipdl
@@ -25,16 +25,17 @@ include protocol PMemoryReportRequest;
 include protocol PNecko;
 include protocol PSharedBufferManager;
 include protocol PSms;
 include protocol PSpeechSynthesis;
 include protocol PStorage;
 include protocol PTelephony;
 include protocol PTestShell;
 include protocol PJavaScript;
+include protocol PVsyncEvent;
 include DOMTypes;
 include JavaScriptTypes;
 include InputStreamParams;
 include PTabContext;
 include URIParams;
 include ProtocolTypes;
 
 using GeoPosition from "nsGeoPositionIPCSerialiser.h";
@@ -280,16 +281,17 @@ struct DataStoreSetting {
   bool enabled;
 };
 
 intr protocol PContent
 {
     parent opens PCompositor;
     parent opens PSharedBufferManager;
     parent opens PImageBridge;
+    parent opens PVsyncEvent;
     child opens PBackground;
 
     manages PAsmJSCacheEntry;
     manages PBlob;
     manages PBluetooth;
     manages PBrowser;
     manages PCrashReporter;
     manages PCycleCollectWithLogs;
diff --git a/gfx/layers/ipc/PVsyncEvent.ipdl b/gfx/layers/ipc/PVsyncEvent.ipdl
new file mode 100644
--- /dev/null
+++ b/gfx/layers/ipc/PVsyncEvent.ipdl
@@ -0,0 +1,29 @@
+/* -*- Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 8 -*- */
+/* vim: set sw=2 ts=4 et tw=80 ft=cpp : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+include ProtocolTypes;
+
+namespace mozilla {
+namespace layers {
+
+struct VsyncData
+{
+  int64_t timeStamp;
+  int32_t frameNumber;
+};
+
+sync protocol PVsyncEvent
+{
+child:
+  NotifyVsyncEvent(VsyncData aVsyncData);
+
+parent:
+  EnableVsyncEventNotification();
+  DisableVsyncEventNotification();
+};
+
+} // namespace layers
+} // namespace mozilla
diff --git a/gfx/layers/ipc/VsyncEventChild.cpp b/gfx/layers/ipc/VsyncEventChild.cpp
new file mode 100644
--- /dev/null
+++ b/gfx/layers/ipc/VsyncEventChild.cpp
@@ -0,0 +1,158 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=4 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/layers/VsyncEventChild.h"
+#include "base/thread.h"
+#include "nsXULAppAPI.h"
+
+#ifdef MOZ_NUWA_PROCESS
+#include "ipc/Nuwa.h"
+#endif
+
+#include "VsyncDispatcher.h"
+
+//#define VSYNC_EVENT_CHILD_CREATE_THREAD
+
+//#define PRINT_VSYNC_DEBUG
+
+#ifdef PRINT_VSYNC_DEBUG
+#define VSYNC_DEBUG_MESSAGE printf_stderr("bignose tid:%d %s",gettid(),__PRETTY_FUNCTION__)
+#else
+#define VSYNC_DEBUG_MESSAGE
+#endif
+
+using namespace base;
+using namespace mozilla::ipc;
+
+namespace mozilla {
+namespace layers {
+
+static VsyncEventChild* sVsyncEventChild = nullptr;
+
+static Thread* sVsyncEventThread = nullptr;
+
+static bool
+CreateVsyncChildThread()
+{
+  if (sVsyncEventThread) {
+    return true;
+  }
+
+  sVsyncEventThread = new Thread("Vsync child ipc thread");
+
+  if (!sVsyncEventThread->Start()) {
+    delete sVsyncEventThread;
+    sVsyncEventThread = nullptr;
+    return false;
+  }
+
+  return true;
+}
+
+static void
+ConnectVsyncEventChild(VsyncEventChild* aVsyncEventChild,
+                       Transport* aTransport,
+                       ProcessHandle aOtherProcess)
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  aVsyncEventChild->Open(aTransport, aOtherProcess, XRE_GetIOMessageLoop(), ChildSide);
+
+#ifdef MOZ_NUWA_PROCESS
+  if (IsNuwaProcess()) {
+    aVsyncEventChild->GetMessageLoop()->PostTask(FROM_HERE,
+                                                 NewRunnableFunction(NuwaMarkCurrentThread,
+                                                 (void (*)(void *))nullptr,
+                                                 (void *)nullptr));
+  }
+#endif
+}
+
+PVsyncEventChild*
+VsyncEventChild::Create(Transport* aTransport, ProcessId aOtherProcess)
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  NS_ASSERTION(NS_IsMainThread(), "Should be on the main Thread!");
+
+  ProcessHandle processHandle;
+  if (!OpenProcessHandle(aOtherProcess, &processHandle)) {
+    return nullptr;
+  }
+
+#ifdef VSYNC_EVENT_CHILD_CREATE_THREAD
+  if (!CreateVsyncChildThread()) {
+    return nullptr;
+  }
+
+  VsyncDispatcher::StartUpOnExistedThread(sVsyncEventThread->message_loop());
+
+  sVsyncEventChild = new VsyncEventChild(sVsyncEventThread->message_loop(),
+                                         aTransport);
+
+  sVsyncEventChild->GetMessageLoop()->PostTask(FROM_HERE, NewRunnableFunction(
+                                               &ConnectVsyncEventChild,
+                                               sVsyncEventChild,
+                                               aTransport,
+                                               processHandle));
+#else
+  VsyncDispatcher::StartUpOnExistedThread(MessageLoop::current());
+
+  sVsyncEventChild = new VsyncEventChild(MessageLoop::current(),
+                                         aTransport);
+
+  sVsyncEventChild->Open(aTransport, aOtherProcess, XRE_GetIOMessageLoop(), ChildSide);
+#endif
+
+  return sVsyncEventChild;
+}
+
+VsyncEventChild*
+VsyncEventChild::GetSingleton()
+{
+  return sVsyncEventChild;
+}
+
+VsyncEventChild::VsyncEventChild(MessageLoop* aMessageLoop, Transport* aTransport)
+  : mMessageLoop(aMessageLoop)
+  , mTransport(aTransport)
+{
+
+}
+
+VsyncEventChild::~VsyncEventChild()
+{
+  if (mTransport) {
+    XRE_GetIOMessageLoop()->PostTask(FROM_HERE,
+                                     new DeleteTask<Transport>(mTransport));
+  }
+}
+
+bool VsyncEventChild::RecvNotifyVsyncEvent(const VsyncData& aVsyncData)
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  VsyncDispatcher::GetInstance()->DispatchVsync(aVsyncData);
+
+  return true;
+}
+
+void
+VsyncEventChild::ActorDestroy(ActorDestroyReason aActorDestroyReason)
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  return;
+}
+
+MessageLoop*
+VsyncEventChild::GetMessageLoop()
+{
+  return mMessageLoop;
+}
+
+} //layers
+} //mozilla
diff --git a/gfx/layers/ipc/VsyncEventChild.h b/gfx/layers/ipc/VsyncEventChild.h
new file mode 100644
--- /dev/null
+++ b/gfx/layers/ipc/VsyncEventChild.h
@@ -0,0 +1,39 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=4 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef MOZILLA_GFX_VSYNCEVENTCHILD_H
+#define MOZILLA_GFX_VSYNCEVENTCHILD_H
+
+#include "mozilla/layers/PVsyncEventChild.h"
+
+namespace mozilla {
+namespace layers {
+
+class VsyncEventChild MOZ_FINAL : public PVsyncEventChild
+{
+public:
+  static PVsyncEventChild* Create(Transport* aTransport,
+                                  ProcessId aOtherProcess);
+
+  static VsyncEventChild* GetSingleton();
+
+  VsyncEventChild(MessageLoop* aMessageLoop, Transport* aTransport);
+  ~VsyncEventChild();
+
+  virtual bool RecvNotifyVsyncEvent(const VsyncData& aVsyncData) MOZ_OVERRIDE;
+
+  virtual void ActorDestroy(ActorDestroyReason aActorDestroyReason) MOZ_OVERRIDE;
+
+  MessageLoop* GetMessageLoop();
+
+private:
+  MessageLoop* mMessageLoop;
+  Transport* mTransport;
+};
+
+} //layers
+} //mozilla
+#endif  //MOZILLA_GFX_VSYNCEVENTCHILD_H
diff --git a/gfx/layers/ipc/VsyncEventParent.cpp b/gfx/layers/ipc/VsyncEventParent.cpp
new file mode 100644
--- /dev/null
+++ b/gfx/layers/ipc/VsyncEventParent.cpp
@@ -0,0 +1,133 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=4 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "mozilla/layers/VsyncEventParent.h"
+#include "mozilla/ipc/Transport.h"
+#include "base/thread.h"
+#include "nsXULAppAPI.h"
+
+#include "VsyncDispatcher.h"
+
+//#define PRINT_VSYNC_DEBUG
+
+#ifdef PRINT_VSYNC_DEBUG
+#define VSYNC_DEBUG_MESSAGE printf_stderr("bignose tid:%d %s",gettid(),__PRETTY_FUNCTION__)
+#else
+#define VSYNC_DEBUG_MESSAGE
+#endif
+
+using namespace base;
+using namespace mozilla::ipc;
+
+namespace mozilla {
+namespace layers {
+
+static void
+ConnectVsyncEventParent(PVsyncEventParent* aVsyncEventParent,
+                        Transport* aTransport,
+                        ProcessHandle aOtherProcess)
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  aVsyncEventParent->Open(aTransport, aOtherProcess, XRE_GetIOMessageLoop(), ParentSide);
+}
+
+/*static*/ PVsyncEventParent*
+VsyncEventParent::Create(Transport* aTransport, ProcessId aOtherProcess)
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  ProcessHandle processHandle;
+  if (!OpenProcessHandle(aOtherProcess, &processHandle)) {
+    return nullptr;
+  }
+
+  VsyncDispatcher::StartUpThread();
+
+  VsyncEventParent* vsync = new VsyncEventParent(VsyncDispatcher::GetInstance()->GetMessageLoop(),
+                                                 aTransport);
+
+  vsync->GetMessageLoop()->PostTask(FROM_HERE, NewRunnableFunction(
+                                    &ConnectVsyncEventParent,
+                                    vsync,
+                                    aTransport,
+                                    processHandle));
+
+  return vsync;
+}
+
+VsyncEventParent::VsyncEventParent(MessageLoop* aMessageLoop, Transport* aTransport)
+  : mMessageLoop(aMessageLoop)
+  , mTransport(aTransport)
+{
+
+}
+
+VsyncEventParent::~VsyncEventParent()
+{
+  if (mTransport) {
+    XRE_GetIOMessageLoop()->PostTask(FROM_HERE,
+                                     new DeleteTask<Transport>(mTransport));
+  }
+}
+
+bool
+VsyncEventParent::RecvEnableVsyncEventNotification()
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  VsyncDispatcher::GetInstance()->RegisterVsyncEventParent(this, true);
+
+  return true;
+}
+
+bool
+VsyncEventParent::RecvDisableVsyncEventNotification()
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  VsyncDispatcher::GetInstance()->RegisterVsyncEventParent(this, false);
+
+  return true;
+}
+
+void
+VsyncEventParent::ActorDestroy(ActorDestroyReason aActorDestroyReason)
+{
+  VSYNC_DEBUG_MESSAGE;
+
+  VsyncDispatcher::GetInstance()->RegisterVsyncEventParent(this, false);
+
+  return;
+}
+
+IToplevelProtocol*
+VsyncEventParent::CloneToplevel(const InfallibleTArray<ProtocolFdMapping>& aFds,
+                                ProcessHandle aPeerProcess,
+                                ProtocolCloneContext* aCtx)
+{
+  for (unsigned int i = 0; i < aFds.Length(); i++) {
+    if (aFds[i].protocolId() == unsigned(GetProtocolId())) {
+      Transport* transport = OpenDescriptor(aFds[i].fd(), Transport::MODE_SERVER);
+      PVsyncEventParent* vsync = Create(transport, GetProcId(aPeerProcess));
+
+      vsync->CloneManagees(this, aCtx);
+      vsync->IToplevelProtocol::SetTransport(transport);
+
+      return vsync;
+    }
+  }
+  return nullptr;
+}
+
+MessageLoop*
+VsyncEventParent::GetMessageLoop()
+{
+  return mMessageLoop;
+}
+
+} //layers
+} //mozilla
diff --git a/gfx/layers/ipc/VsyncEventParent.h b/gfx/layers/ipc/VsyncEventParent.h
new file mode 100644
--- /dev/null
+++ b/gfx/layers/ipc/VsyncEventParent.h
@@ -0,0 +1,43 @@
+/* -*- Mode: C++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=4 et tw=80 : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef MOZILLA_VSYNC_EVENT_PARENT_H
+#define MOZILLA_VSYNC_EVENT_PARENT_H
+
+#include "mozilla/layers/PVsyncEventParent.h"
+
+class MessageLoop;
+
+namespace mozilla {
+namespace layers {
+
+class VsyncEventParent MOZ_FINAL : public PVsyncEventParent
+{
+public:
+  static PVsyncEventParent* Create(Transport* aTransport, ProcessId aOtherProcess);
+
+  VsyncEventParent(MessageLoop* aMessageLoop, Transport* aTransport);
+  ~VsyncEventParent();
+
+  virtual bool RecvEnableVsyncEventNotification() MOZ_OVERRIDE;
+  virtual bool RecvDisableVsyncEventNotification() MOZ_OVERRIDE;
+
+  virtual void ActorDestroy(ActorDestroyReason aActorDestroyReason) MOZ_OVERRIDE;
+
+  virtual IToplevelProtocol* CloneToplevel(const InfallibleTArray<ProtocolFdMapping>& aFds,
+                                           ProcessHandle aPeerProcess,
+                                           ProtocolCloneContext* aCtx) MOZ_OVERRIDE;
+
+  MessageLoop* GetMessageLoop();
+
+private:
+  MessageLoop* mMessageLoop;
+  Transport* mTransport;
+};
+
+} //layers
+} //mozilla
+#endif  //MOZILLA_VSYNC_EVENT_PARENT_H
diff --git a/gfx/layers/moz.build b/gfx/layers/moz.build
--- a/gfx/layers/moz.build
+++ b/gfx/layers/moz.build
@@ -150,16 +150,18 @@ EXPORTS.mozilla.layers += [
     'ipc/LayerTransactionChild.h',
     'ipc/LayerTransactionParent.h',
     'ipc/ShadowLayers.h',
     'ipc/ShadowLayersManager.h',
     'ipc/SharedBufferManagerChild.h',
     'ipc/SharedBufferManagerParent.h',
     'ipc/SharedPlanarYCbCrImage.h',
     'ipc/SharedRGBImage.h',
+    'ipc/VsyncEventChild.h',
+    'ipc/VsyncEventParent.h',
     'LayersTypes.h',
     'opengl/CompositingRenderTargetOGL.h',
     'opengl/CompositorOGL.h',
     'opengl/GrallocTextureClient.h',
     'opengl/GrallocTextureHost.h',
     'opengl/MacIOSurfaceTextureClientOGL.h',
     'opengl/MacIOSurfaceTextureHostOGL.h',
     'opengl/TextureClientOGL.h',
@@ -293,16 +295,18 @@ UNIFIED_SOURCES += [
     'ipc/LayerTransactionParent.cpp',
     'ipc/ShadowLayerChild.cpp',
     'ipc/ShadowLayerParent.cpp',
     'ipc/ShadowLayers.cpp',
     'ipc/SharedBufferManagerChild.cpp',
     'ipc/SharedBufferManagerParent.cpp',
     'ipc/SharedPlanarYCbCrImage.cpp',
     'ipc/SharedRGBImage.cpp',
+    'ipc/VsyncEventChild.cpp',
+    'ipc/VsyncEventParent.cpp',
     'LayerScope.cpp',
     'LayersLogging.cpp',
     'LayerSorter.cpp',
     'opengl/CompositingRenderTargetOGL.cpp',
     'opengl/CompositorOGL.cpp',
     'opengl/OGLShaderProgram.cpp',
     'opengl/TextureClientOGL.cpp',
     'opengl/TextureHostOGL.cpp',
@@ -341,16 +345,17 @@ IPDL_SOURCES = [
     'ipc/LayersSurfaces.ipdlh',
     'ipc/PCompositable.ipdl',
     'ipc/PCompositor.ipdl',
     'ipc/PImageBridge.ipdl',
     'ipc/PLayer.ipdl',
     'ipc/PLayerTransaction.ipdl',
     'ipc/PSharedBufferManager.ipdl',
     'ipc/PTexture.ipdl',
+    'ipc/PVsyncEvent.ipdl',
 ]
 
 FAIL_ON_WARNINGS = True
 
 MSVC_ENABLE_PGO = True
 
 include('/ipc/chromium/chromium-config.mozbuild')
 
diff --git a/widget/gonk/nsWindow.cpp b/widget/gonk/nsWindow.cpp
--- a/widget/gonk/nsWindow.cpp
+++ b/widget/gonk/nsWindow.cpp
@@ -239,41 +239,42 @@ nsWindow::DoDraw(void)
     if (listener) {
         listener->DidPaintWindow();
     }
 }
 
 nsEventStatus
 nsWindow::DispatchInputEvent(WidgetGUIEvent& aEvent, bool* aWasCaptured)
 {
-    VsyncDispatcher::VsyncDispatcherInputProcessingHelper inputHelper;
+    {
+        //notify VsyncDispatcher apzc updated
+        VsyncDispatcher::VsyncDispatcherInputProcessingHelper inputMonitor;
 
-    if (aWasCaptured) {
-        *aWasCaptured = false;
-    }
-    if (!gFocusedWindow) {
-        return nsEventStatus_eIgnore;
-    }
+        if (aWasCaptured) {
+            *aWasCaptured = false;
+        }
+        if (!gFocusedWindow) {
+            return nsEventStatus_eIgnore;
+        }
 
-    gFocusedWindow->UserActivity();
+        gFocusedWindow->UserActivity();
 
-    aEvent.widget = gFocusedWindow;
+        aEvent.widget = gFocusedWindow;
 
-    if (TabParent* capturer = TabParent::GetEventCapturer()) {
-        bool captured = capturer->TryCapture(aEvent);
-        if (aWasCaptured) {
-            *aWasCaptured = captured;
-        }
-        if (captured) {
-            return nsEventStatus_eConsumeNoDefault;
+        if (TabParent* capturer = TabParent::GetEventCapturer()) {
+            bool captured = capturer->TryCapture(aEvent);
+            if (aWasCaptured) {
+                *aWasCaptured = captured;
+            }
+            if (captured) {
+                return nsEventStatus_eConsumeNoDefault;
+            }
         }
     }
 
-    inputHelper.Notify();
-
     nsEventStatus status;
     gFocusedWindow->DispatchEvent(&aEvent, status);
     return status;
 }
 
 NS_IMETHODIMP
 nsWindow::Create(nsIWidget *aParent,
                  void *aNativeParent,
diff --git a/xpcom/glue/nsHashKeys.h b/xpcom/glue/nsHashKeys.h
--- a/xpcom/glue/nsHashKeys.h
+++ b/xpcom/glue/nsHashKeys.h
@@ -476,18 +476,18 @@ private:
  * the string lives longer than the hash table.
  */
 class nsCharPtrHashKey : public PLDHashEntryHdr
 {
 public:
   typedef const char* KeyType;
   typedef const char* KeyTypePointer;
 
-  nsCharPtrHashKey(const char* aKey) : mKey(strdup(aKey)) { }
-  nsCharPtrHashKey(const nsCharPtrHashKey& toCopy) : mKey(strdup(toCopy.mKey)) { }
+  nsCharPtrHashKey(const char* aKey) : mKey(::strdup(aKey)) { }
+  nsCharPtrHashKey(const nsCharPtrHashKey& toCopy) : mKey(::strdup(toCopy.mKey)) { }
 
   nsCharPtrHashKey(nsCharPtrHashKey&& other)
     : mKey(other.mKey)
   {
     other.mKey = nullptr;
   }
 
   ~nsCharPtrHashKey() { if (mKey) free(const_cast<char *>(mKey)); }
