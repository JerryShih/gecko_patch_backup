# HG changeset patch
# Parent c0e78dd60bb1abc66557158694aad8281ee5da23
# User Jerry Shih <hshih@mozilla.com>
Modify refresh driver timer to fit vsync dispatcher framework.

diff --git a/layout/base/nsRefreshDriver.cpp b/layout/base/nsRefreshDriver.cpp
--- a/layout/base/nsRefreshDriver.cpp
+++ b/layout/base/nsRefreshDriver.cpp
@@ -61,138 +61,92 @@ static PRLogModuleInfo *gLog = nullptr;
 
 #define DEFAULT_FRAME_RATE 60
 #define DEFAULT_THROTTLED_FRAME_RATE 1
 // after 10 minutes, stop firing off inactive timers
 #define DEFAULT_INACTIVE_TIMER_DISABLE_SECONDS 600
 
 namespace mozilla {
 
-/*
- * The base class for all global refresh driver timers.  It takes care
- * of managing the list of refresh drivers attached to them and
- * provides interfaces for querying/setting the rate and actually
- * running a timer 'Tick'.  Subclasses must implement StartTimer(),
- * StopTimer(), and ScheduleNextTick() -- the first two just
- * start/stop whatever timer mechanism is in use, and ScheduleNextTick
- * is called at the start of the Tick() implementation to set a time
- * for the next tick.
- */
-class RefreshDriverTimer {
-public:
-  /*
-   * aRate -- the delay, in milliseconds, requested between timer firings
-   */
-  RefreshDriverTimer(double aRate)
-  {
-    SetRate(aRate);
+RefreshDriverTimer::RefreshDriverTimer(double aRate)
+{
+  SetRate(aRate);
+}
+
+RefreshDriverTimer::~RefreshDriverTimer()
+{
+  NS_ASSERTION(mRefreshDrivers.Length() == 0, "Should have removed all refresh drivers from here by now!");
+}
+
+void
+RefreshDriverTimer::AddRefreshDriver(nsRefreshDriver* aDriver)
+{
+  LOG("[%p] AddRefreshDriver %p", this, aDriver);
+
+  NS_ASSERTION(!mRefreshDrivers.Contains(aDriver), "AddRefreshDriver for a refresh driver that's already in the list!");
+  mRefreshDrivers.AppendElement(aDriver);
+
+  if (mRefreshDrivers.Length() == 1) {
+    StartTimer();
   }
+}
 
-  virtual ~RefreshDriverTimer()
-  {
-    NS_ASSERTION(mRefreshDrivers.Length() == 0, "Should have removed all refresh drivers from here by now!");
+void
+RefreshDriverTimer::RemoveRefreshDriver(nsRefreshDriver* aDriver)
+{
+  LOG("[%p] RemoveRefreshDriver %p", this, aDriver);
+
+  NS_ASSERTION(mRefreshDrivers.Contains(aDriver), "RemoveRefreshDriver for a refresh driver that's not in the list!");
+  mRefreshDrivers.RemoveElement(aDriver);
+
+  if (mRefreshDrivers.Length() == 0) {
+    StopTimer();
   }
+}
 
-  virtual void AddRefreshDriver(nsRefreshDriver* aDriver)
-  {
-    LOG("[%p] AddRefreshDriver %p", this, aDriver);
+void
+RefreshDriverTimer::SetRate(double aNewRate)
+{
+  mRateMilliseconds = aNewRate;
+  mRateDuration = TimeDuration::FromMilliseconds(mRateMilliseconds);
+}
 
-    NS_ASSERTION(!mRefreshDrivers.Contains(aDriver), "AddRefreshDriver for a refresh driver that's already in the list!");
-    mRefreshDrivers.AppendElement(aDriver);
+void
+RefreshDriverTimer::Tick()
+{
+  int64_t jsnow = JS_Now();
+  TimeStamp now = TimeStamp::Now();
 
-    if (mRefreshDrivers.Length() == 1) {
-      StartTimer();
+  ScheduleNextTick(now);
+
+  mLastFireEpoch = jsnow;
+  mLastFireTime = now;
+
+  LOG("[%p] ticking drivers...", this);
+  nsTArray<nsRefPtr<nsRefreshDriver> > drivers(mRefreshDrivers);
+  // RD is short for RefreshDriver
+  profiler_tracing("Paint", "RD", TRACING_INTERVAL_START);
+  for (size_t i = 0; i < drivers.Length(); ++i) {
+    // don't poke this driver if it's in test mode
+    if (drivers[i]->IsTestControllingRefreshesEnabled()) {
+      continue;
     }
+
+    TickDriver(drivers[i], jsnow, now);
   }
+  profiler_tracing("Paint", "RD", TRACING_INTERVAL_END);
+  LOG("[%p] done.", this);
+}
 
-  virtual void RemoveRefreshDriver(nsRefreshDriver* aDriver)
-  {
-    LOG("[%p] RemoveRefreshDriver %p", this, aDriver);
-
-    NS_ASSERTION(mRefreshDrivers.Contains(aDriver), "RemoveRefreshDriver for a refresh driver that's not in the list!");
-    mRefreshDrivers.RemoveElement(aDriver);
-
-    if (mRefreshDrivers.Length() == 0) {
-      StopTimer();
-    }
-  }
-
-  double GetRate() const
-  {
-    return mRateMilliseconds;
-  }
-
-  // will take effect at next timer tick
-  virtual void SetRate(double aNewRate)
-  {
-    mRateMilliseconds = aNewRate;
-    mRateDuration = TimeDuration::FromMilliseconds(mRateMilliseconds);
-  }
-
-  TimeStamp MostRecentRefresh() const { return mLastFireTime; }
-  int64_t MostRecentRefreshEpochTime() const { return mLastFireEpoch; }
-
-protected:
-  virtual void StartTimer() = 0;
-  virtual void StopTimer() = 0;
-  virtual void ScheduleNextTick(TimeStamp aNowTime) = 0;
-
-  /*
-   * Actually runs a tick, poking all the attached RefreshDrivers.
-   * Grabs the "now" time via JS_Now and TimeStamp::Now().
-   */
-  void Tick()
-  {
-    int64_t jsnow = JS_Now();
-    TimeStamp now = TimeStamp::Now();
-
-    ScheduleNextTick(now);
-
-    mLastFireEpoch = jsnow;
-    mLastFireTime = now;
-
-    LOG("[%p] ticking drivers...", this);
-    nsTArray<nsRefPtr<nsRefreshDriver> > drivers(mRefreshDrivers);
-    // RD is short for RefreshDriver
-    profiler_tracing("Paint", "RD", TRACING_INTERVAL_START);
-    for (size_t i = 0; i < drivers.Length(); ++i) {
-      // don't poke this driver if it's in test mode
-      if (drivers[i]->IsTestControllingRefreshesEnabled()) {
-        continue;
-      }
-
-      TickDriver(drivers[i], jsnow, now);
-    }
-    profiler_tracing("Paint", "RD", TRACING_INTERVAL_END);
-    LOG("[%p] done.", this);
-  }
-
-  static void TickDriver(nsRefreshDriver* driver, int64_t jsnow, TimeStamp now)
-  {
-    LOG(">> TickDriver: %p (jsnow: %lld)", driver, jsnow);
-    driver->Tick(jsnow, now);
-  }
-
-  double mRateMilliseconds;
-  TimeDuration mRateDuration;
-
-  int64_t mLastFireEpoch;
-  TimeStamp mLastFireTime;
-  TimeStamp mTargetTime;
-
-  nsTArray<nsRefPtr<nsRefreshDriver> > mRefreshDrivers;
-
-  // useful callback for nsITimer-based derived classes, here
-  // bacause of c++ protected shenanigans
-  static void TimerTick(nsITimer* aTimer, void* aClosure)
-  {
-    RefreshDriverTimer *timer = static_cast<RefreshDriverTimer*>(aClosure);
-    timer->Tick();
-  }
-};
+/*static*/ void
+RefreshDriverTimer::TickDriver(nsRefreshDriver* driver, int64_t jsnow, TimeStamp now)
+{
+  LOG(">> TickDriver: %p (jsnow: %lld)", driver, jsnow);
+  driver->Tick(jsnow, now);
+}
 
 /*
  * A RefreshDriverTimer that uses a nsITimer as the underlying timer.  Note that
  * this is a ONE_SHOT timer, not a repeating one!  Subclasses are expected to
  * implement ScheduleNextTick and intelligently calculate the next time to tick,
  * and to reset mTimer.  Using a repeating nsITimer gets us into a lot of pain
  * with its attempt at intelligent slack removal and such, so we don't do it.
  */
diff --git a/layout/base/nsRefreshDriver.h b/layout/base/nsRefreshDriver.h
--- a/layout/base/nsRefreshDriver.h
+++ b/layout/base/nsRefreshDriver.h
@@ -22,19 +22,19 @@
 #include "mozilla/Attributes.h"
 #include "mozilla/Maybe.h"
 #include "GeckoProfiler.h"
 #include "mozilla/layers/TransactionIdAllocator.h"
 
 class nsPresContext;
 class nsIPresShell;
 class nsIDocument;
+class nsIRunnable;
+class nsITimer;
 class imgIRequest;
-class nsIRunnable;
-
 namespace mozilla {
 class RefreshDriverTimer;
 }
 
 /**
  * An abstract base class to be implemented by callers wanting to be
  * notified at refresh times.  When nothing needs to be painted, callers
  * may not be notified.
@@ -382,9 +382,95 @@ private:
 
   friend class mozilla::RefreshDriverTimer;
 
   // turn on or turn off high precision based on various factors
   void ConfigureHighPrecision();
   void SetHighPrecisionTimersEnabled(bool aEnable);
 };
 
+namespace mozilla {
+
+/*
+ * The base class for all global refresh driver timers.  It takes care
+ * of managing the list of refresh drivers attached to them and
+ * provides interfaces for querying/setting the rate and actually
+ * running a timer 'Tick'.  Subclasses must implement StartTimer(),
+ * StopTimer(), and ScheduleNextTick() -- the first two just
+ * start/stop whatever timer mechanism is in use, and ScheduleNextTick
+ * is called at the start of the Tick() implementation to set a time
+ * for the next tick.
+ */
+class RefreshDriverTimer {
+public:
+  /*
+   * aRate -- the delay, in milliseconds, requested between timer firings
+   */
+  RefreshDriverTimer(double aRate);
+
+  virtual ~RefreshDriverTimer();
+
+  virtual void AddRefreshDriver(nsRefreshDriver* aDriver);
+
+  virtual void RemoveRefreshDriver(nsRefreshDriver* aDriver);
+
+  double GetRate() const
+  {
+    return mRateMilliseconds;
+  }
+
+  // will take effect at next timer tick
+  virtual void SetRate(double aNewRate);
+
+  TimeStamp MostRecentRefresh() const { return mLastFireTime; }
+  int64_t MostRecentRefreshEpochTime() const { return mLastFireEpoch; }
+
+protected:
+  virtual void StartTimer() = 0;
+  virtual void StopTimer() = 0;
+  virtual void ScheduleNextTick(TimeStamp aNowTime) = 0;
+
+  /*
+   * Actually runs a tick, poking all the attached RefreshDrivers.
+   * Grabs the "now" time via JS_Now and TimeStamp::Now().
+   */
+  void Tick();
+
+  static void TickDriver(nsRefreshDriver* driver, int64_t jsnow, TimeStamp now);
+
+  double mRateMilliseconds;
+  TimeDuration mRateDuration;
+
+  int64_t mLastFireEpoch;
+  TimeStamp mLastFireTime;
+  TimeStamp mTargetTime;
+
+  nsTArray<nsRefPtr<nsRefreshDriver> > mRefreshDrivers;
+
+  // useful callback for nsITimer-based derived classes, here
+  // bacause of c++ protected shenanigans
+  static void TimerTick(nsITimer* aTimer, void* aClosure)
+  {
+    RefreshDriverTimer *timer = static_cast<RefreshDriverTimer*>(aClosure);
+    timer->Tick();
+  }
+};
+
+class VsyncRefreshDriverTimer :
+    public RefreshDriverTimer
+{
+public:
+  VsyncRefreshDriverTimer(double aRate)
+    : RefreshDriverTimer(aRate)
+  {
+  }
+
+  virtual ~VsyncRefreshDriverTimer()
+  {
+    StopTimer();
+  }
+
+  virtual void Tick(int64_t aTimestame, int32_t frameNumber) = 0;
+};
+
+} //mozilla
+
 #endif /* !defined(nsRefreshDriver_h_) */
