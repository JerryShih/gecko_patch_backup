# HG changeset patch
# Parent 6f2c78b0e1b5cb160fc6d7fd082d59341a848301
# User Jerry Shih <hshih@mozilla.com>
show vsync ipc and cpu schedule cost

diff --git a/gfx/layers/VsyncDispatcher.cpp b/gfx/layers/VsyncDispatcher.cpp
--- a/gfx/layers/VsyncDispatcher.cpp
+++ b/gfx/layers/VsyncDispatcher.cpp
@@ -11,16 +11,17 @@
 #include "mozilla/StaticPtr.h"
 #include "nsThreadUtils.h"
 #include "nsRefreshDriver.h"
 #ifdef MOZ_WIDGET_GONK
 #include "nsAppShell.h"
 #endif
 
 #include "base/thread.h"
+#include "base/time.h"
 
 //#define DEBUG_VSYNC
 #ifdef DEBUG_VSYNC
 #define VSYNC_PRINT(...) do { printf_stderr("VDispatcher: " __VA_ARGS__); } while (0)
 #else
 #define VSYNC_PRINT(...) do { } while (0)
 #endif
 
@@ -263,19 +264,19 @@ VsyncDispatcher::NotifyInputEventProcess
 
 void
 VsyncDispatcher::DispatchVsync(const VsyncData& aVsyncData)
 {
 #ifdef ENABLE_INPUTDISPATCHER_NOTIFY
   //1. input
   if (mInputDispatcher) {
     nsCOMPtr<nsIRunnable> mainThreadInputTask =
-        NS_NewRunnableMethodWithArg<const VsyncData&>(this,
-                                                      &VsyncDispatcher::InputEventDispatch,
-                                                      aVsyncData);
+        NS_NewRunnableMethodWithArg<VsyncData>(this,
+                                               &VsyncDispatcher::InputEventDispatch,
+                                               aVsyncData);
     //block vsync event passing until main thread input module updated
     MonitorAutoLock inputLock(mInputMonitor);
 
     NS_DispatchToMainThread(mainThreadInputTask);
     inputLock.Wait(PR_MillisecondsToInterval(4));
   }
 #endif
 
@@ -285,29 +286,32 @@ VsyncDispatcher::DispatchVsync(const Vsy
 #endif
 
 #ifdef ENABLE_REFRESHDRIVER_NOTIFY
   //3. content process tick
   NotifyVsyncEventChild(aVsyncData);
 
   //4. current process tick
   nsCOMPtr<nsIRunnable> mainThreadTickTask =
-      NS_NewRunnableMethodWithArg<const VsyncData&>(this,
-                                                    &VsyncDispatcher::Tick,
-                                                    aVsyncData);
+      NS_NewRunnableMethodWithArg<VsyncData>(this,
+                                             &VsyncDispatcher::Tick,
+                                             aVsyncData);
   NS_DispatchToMainThread(mainThreadTickTask);
 #endif
 }
 
 void
 VsyncDispatcher::InputEventDispatch(const VsyncData& aVsyncData)
 {
   MOZ_RELEASE_ASSERT(NS_IsMainThread());
   //MOZ_ASSERT(NS_IsMainThread());
 
+  static VsyncLatencyLogger<60*1> logger("bignose input");
+  logger.Update(base::TimeTicks::HighResNow().ToInternalValue() - aVsyncData.timeStamp());
+
 #ifdef MOZ_WIDGET_GONK
   DispatchPendingEvent();
 #endif
 }
 
 void
 VsyncDispatcher::Compose(const VsyncData& aVsyncData)
 {
@@ -332,16 +336,19 @@ VsyncDispatcher::NotifyVsyncEventChild(c
 }
 
 void
 VsyncDispatcher::Tick(const VsyncData& aVsyncData)
 {
   MOZ_RELEASE_ASSERT(NS_IsMainThread());
   //MOZ_ASSERT(NS_IsMainThread());
 
+  static VsyncLatencyLogger<60*5> logger("bignose tick");
+  logger.Update(base::TimeTicks::HighResNow().ToInternalValue() - aVsyncData.timeStamp());
+
   // Tick all registered refresh drivers.
   for (RefreshDriverList::size_type i = 0; i < mRefreshDriverList.Length(); i++) {
     nsRefreshDriver *driver = mRefreshDriverList[i];
     driver->DoTick();
   }
 }
 
 } // namespace layers
diff --git a/gfx/layers/VsyncDispatcher.h b/gfx/layers/VsyncDispatcher.h
--- a/gfx/layers/VsyncDispatcher.h
+++ b/gfx/layers/VsyncDispatcher.h
@@ -10,28 +10,137 @@
 #include "mozilla/layers/PVsyncEvent.h"
 #include "mozilla/RefPtr.h"
 #include "mozilla/Monitor.h"
 #include "nsTArray.h"
 
 #include "base/ref_counted.h"
 #include "base/message_loop.h"
 
+#include <limits>
+#include <string>
+
 class nsRefreshDriver;
 
 namespace base {
   class Thread;
 }
 
 namespace mozilla {
 namespace layers {
 
 class CompositorParent;
 class VsyncEventParent;
 
+template<typename Type, uint32_t DataNum>
+class StatisticData
+{
+public:
+  StatisticData()
+  {
+    Reset();
+
+    mDataArray.reserve(DataNum);
+  }
+
+  ~StatisticData()
+  {
+
+  }
+
+  void Reset(void)
+  {
+    mMax=std::numeric_limits<Type>::min();
+    mMin=std::numeric_limits<Type>::max();
+    mTotal=0;
+    mNum=0;
+  }
+
+  //return false if data full
+  bool PushData(Type data)
+  {
+    if(mNum<DataNum){
+      if(mMax<data){
+        mMax=data;
+      }
+      if(mMin>data){
+        mMin=data;
+      }
+      mTotal+=data;
+      mDataArray[mNum++]=data;
+
+      return true;
+    }
+
+    return false;
+  }
+
+  uint32_t GetMax(void)
+  {
+    return mMax;
+  }
+
+  uint32_t GetMin(void)
+  {
+    return mMin;
+  }
+
+  float GetAVG(void)
+  {
+    return (float)mTotal/mNum;
+  }
+
+  float GetSTD(void)
+  {
+    float variance=0.0f;
+    float avg=GetAVG();
+
+    for(int i=0;i<mNum;++i){
+      float delta=mDataArray[i]-avg;
+      variance+=delta*delta;
+    }
+    return std::sqrt(variance/mNum);
+  }
+
+private:
+  Type mMax;
+  Type mMin;
+  Type mTotal;
+  Type mNum;
+  std::vector<Type> mDataArray;
+};
+
+template<uint32_t DataNum>
+class VsyncLatencyLogger
+{
+public:
+  VsyncLatencyLogger(const char *msg="")
+    :mMsg(msg)
+  {
+
+  }
+  ~VsyncLatencyLogger()
+  {
+
+  }
+
+  void Update(int32_t latency_data)
+  {
+    if(!mData.PushData(latency_data)){
+      printf_stderr("%s, tid:%d, \tavg:%f us, max:%u us, min:%u us, std:%f",mMsg.c_str(),gettid(),mData.GetAVG(),mData.GetMax(),
+          mData.GetMin(),mData.GetSTD());
+      mData.Reset();
+    }
+  }
+
+private:
+  StatisticData<int32_t,DataNum> mData;
+  std::string mMsg;
+};
+
 // TODO:
 // Describe the role of this object in vsync routing.
 class VsyncDispatcher : public base::RefCountedThreadSafe<VsyncDispatcher>
 {
   friend class base::RefCountedThreadSafe<VsyncDispatcher>;
 
 public:
   class VsyncDispatcherInputProcessingHelper
