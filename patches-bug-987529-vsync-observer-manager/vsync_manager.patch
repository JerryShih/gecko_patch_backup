# HG changeset patch
# Parent bfd2a8dab7c907a0ac3737472b87c1f8ab12e5da
# User Jerry Shih <hshih@mozilla.com>
add VsyncDispatcher to send vsync event to other module

diff --git a/gfx/layers/VsyncDispatcher.cpp b/gfx/layers/VsyncDispatcher.cpp
new file mode 100644
--- /dev/null
+++ b/gfx/layers/VsyncDispatcher.cpp
@@ -0,0 +1,446 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=8 et ft=cpp : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#include "VsyncDispatcher.h"
+#include "mozilla/layers/VsyncEventParent.h"
+#include "mozilla/layers/VsyncEventChild.h"
+#include "mozilla/layers/CompositorParent.h"
+#include "mozilla/StaticPtr.h"
+#include "nsThreadUtils.h"
+#include "nsRefreshDriver.h"
+#ifdef MOZ_WIDGET_GONK
+#include "nsAppShell.h"
+#endif
+
+#include "base/thread.h"
+
+//#define DEBUG_VSYNC
+#ifdef DEBUG_VSYNC
+#define VSYNC_PRINT(...) do { printf_stderr("VDispatcher: " __VA_ARGS__); } while (0)
+#else
+#define VSYNC_PRINT(...) do { } while (0)
+#endif
+
+// Enable vsycn recievers to get vsync event.
+// 1. Enable Vsync driven refresh driver. Define this flag only after original
+//    timer trigger flow have been removed.
+#define ENABLE_REFRESHDRIVER_NOTIFY
+// 2. Enable Vsync driven input dispatch. Define this flag only after original
+//    NativeEventProcess flow be removed.
+#define ENABLE_INPUTDISPATCHER_NOTIFY
+// 3. Enable Vsync driven composition. Define this flag only after original
+//    SchdedulCompositor callers been removed.
+#define ENABLE_COMPOSITOR_NOTIFY
+
+//using namespace base;
+
+namespace mozilla {
+namespace layers {
+
+base::Thread* sVsyncDispatchThread = nullptr;
+MessageLoop* sVsyncDispatchMessageLoop = nullptr;
+
+static bool
+CreateThread()
+{
+  if (sVsyncDispatchThread) {
+    return true;
+  }
+
+  sVsyncDispatchThread = new base::Thread("Vsync dispatch thread");
+
+  if (!sVsyncDispatchThread->Start()) {
+    delete sVsyncDispatchThread;
+    sVsyncDispatchThread = nullptr;
+    return false;
+  }
+
+  sVsyncDispatchMessageLoop = sVsyncDispatchThread->message_loop();
+
+  return true;
+}
+
+// Singleton
+// TODO: where to distroy sVsyncDispatcher?
+// Caller should not be able to call any publuc member function of this
+// singleton after VsyncDispatcher::Shutdown
+static StaticRefPtr<VsyncDispatcher> sVsyncDispatcher;
+
+// TODO:
+// Generically, introduce a new singleton casue trouble in at_exit process.
+// Try to find a holder to host VsyncDispatcher.
+/*static*/ VsyncDispatcher*
+VsyncDispatcher::GetInstance()
+{
+  if (sVsyncDispatcher.get() == nullptr) {
+    if (XRE_GetProcessType() == GeckoProcessType_Default) {
+      StartUpThread();
+    }
+
+    sVsyncDispatcher = new VsyncDispatcher();
+  }
+
+  return sVsyncDispatcher;
+}
+
+/*static*/ void
+VsyncDispatcher::StartUpThread()
+{
+  //only b2g need to create a new thread
+  MOZ_RELEASE_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+  //MOZ_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+
+  if (!sVsyncDispatchMessageLoop) {
+    CreateThread();
+  }
+}
+
+/*static*/ void
+VsyncDispatcher::StartUpOnExistedThread(MessageLoop* aMessageLoop)
+{
+  if (!sVsyncDispatchMessageLoop) {
+    sVsyncDispatchMessageLoop = aMessageLoop;
+  }
+}
+
+// TODO:
+// 1. VSyncDispather::GetInstance and Shutdown need to be thread safe
+// 2. Call Shutdown at? gfxPlatform or?
+void
+VsyncDispatcher::Shutdown()
+{
+  if (sVsyncDispatcher.get()) {
+    delete sVsyncDispatcher;
+    sVsyncDispatcher = nullptr;
+  }
+}
+
+VsyncDispatcher::VsyncDispatcher()
+  : mHasInputDispatcher(false)
+  , mEnableVsyncNotification(false)
+  , mInputMonitor("vsync main thread input monitor")
+  , mCompositorListMutex("compositor list mutex")
+  , mRefreshDriverListMutex("refresh driver list mutex")
+  , mVsyncEventParentListMutex("vsync parent list mutex")
+  , mHasInputDispatcherMutex("input dispatcher flag mutex")
+  , mVsyncListenerMutex("vsync listener list mutex")
+{
+}
+
+VsyncDispatcher::~VsyncDispatcher()
+{
+}
+
+int
+VsyncDispatcher::GetRegistedObjectCount() const
+{
+   int count = 0;
+
+   count += mCompositorList.Length();
+   count += mRefreshDriverList.Length();
+   count += mVsyncEventParentList.Length();
+   count += (mHasInputDispatcher ? 1 : 0);
+
+   return count;
+}
+
+void
+VsyncDispatcher::CheckVsyncNotification()
+{
+  // If this process is content process, we check the observer number to
+  // enable/disable vsync notification
+  if (XRE_GetProcessType() != GeckoProcessType_Default) {
+    if (GetRegistedObjectCount() > 0) {
+      if (!mEnableVsyncNotification) {
+        mEnableVsyncNotification = true;
+        VsyncEventChild::GetSingleton()->SendEnableVsyncEventNotification();
+      }
+    }
+    else{
+      if (mEnableVsyncNotification) {
+        mEnableVsyncNotification = false;
+        VsyncEventChild::GetSingleton()->SendDisableVsyncEventNotification();
+      }
+    }
+  }
+}
+
+MessageLoop*
+VsyncDispatcher::GetMessageLoop()
+{
+  return sVsyncDispatchMessageLoop;
+}
+
+void
+VsyncDispatcher::RegisterInputDispatcher()
+{
+  VSYNC_PRINT("RegisterInputDispatcher");
+
+  // This function should be called in chrome process only.
+  MOZ_RELEASE_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+  //MOZ_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+
+  //MutexAutoLock lock(mHasInputDispatcherMutex);
+  //MutexAutoLock lock(mVsyncListenerMutex);
+
+  //mHasInputDispatcher = true;
+
+  GetMessageLoop()->PostTask(FROM_HERE,
+                             NewRunnableMethod(this,
+                             &VsyncDispatcher::SetInputDispatcherInternal,
+                             true));
+}
+
+void
+VsyncDispatcher::UnregisterInputDispatcher()
+{
+  VSYNC_PRINT("UnregisterInputDispatcher");
+
+  // This function should be called in chrome process only.
+  MOZ_RELEASE_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+  //MOZ_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+
+  //MutexAutoLock lock(mHasInputDispatcherMutex);
+  //MutexAutoLock lock(mVsyncListenerMutex);
+
+  //mHasInputDispatcher = false;
+
+  GetMessageLoop()->PostTask(FROM_HERE,
+                             NewRunnableMethod(this,
+                             &VsyncDispatcher::SetInputDispatcherInternal,
+                             false));
+}
+
+void
+VsyncDispatcher::SetInputDispatcherInternal(bool aReg)
+{
+  mHasInputDispatcher = aReg;
+}
+
+void
+VsyncDispatcher::RegisterCompositer(layers::CompositorParent* aCompositorParent)
+{
+  // You should only see this log while screen is updating.
+  // While screen is not update, this log should not appear.
+  // Otherwise, there is a bug in CompositorParent side.
+  VSYNC_PRINT("RegisterCompositor\n");
+
+  // This function should be called in chrome process only.
+  MOZ_RELEASE_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+  //MOZ_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+
+  MutexAutoLock lock(mCompositorListMutex);
+  //MutexAutoLock lock(mVsyncListenerMutex);
+
+  ChangeList(&mCompositorList, aCompositorParent, true);
+  //ChangeList(&mCompositorList, aCompositorParent, true);
+}
+
+void
+VsyncDispatcher::UnregisterCompositer(layers::CompositorParent* aCompositorParent)
+{
+  // You should only see this log while screen is updating.
+  // While screen is not update, this log should not appear.
+  // Otherwise, there is a bug in CompositorParent side.
+  VSYNC_PRINT("UnregisterCompositor\n");
+
+  // This function should be called in chrome process only.
+  MOZ_RELEASE_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+  //MOZ_ASSERT(XRE_GetProcessType() == GeckoProcessType_Default);
+
+  MutexAutoLock lock(mCompositorListMutex);
+  //MutexAutoLock lock(mVsyncListenerMutex);
+
+  ChangeList(&mCompositorList, aCompositorParent, false);
+  //ChangeList(&mCompositorList, aCompositorParent, mVsyncListenerMutex, false);
+}
+
+void
+VsyncDispatcher::RegisterRefreshDriver(nsRefreshDriver *ansRefreshDriver)
+{
+  VSYNC_PRINT("RegisterRefreshDriver");
+
+  //ChangeList(&mRefreshDriverList, ansRefreshDriver, mRefreshDriverListMutex, true);
+  //ChangeList(&mRefreshDriverList, ansRefreshDriver, mVsyncListenerMutex, true);
+
+  GetMessageLoop()->PostTask(FROM_HERE,
+                             NewRunnableMethod(this,
+                             &VsyncDispatcher::ChangeList<nsRefreshDriver>,
+                             &mRefreshDriverList,
+                             ansRefreshDriver,
+                             true));
+}
+
+void
+VsyncDispatcher::UnregisterRefreshDriver(nsRefreshDriver *ansRefreshDriver)
+{
+  VSYNC_PRINT("UnregisterRefreshDriver");
+
+  //ChangeList(&mRefreshDriverList, ansRefreshDriver, mRefreshDriverListMutex, false);
+  //ChangeList(&mRefreshDriverList, ansRefreshDriver, mVsyncListenerMutex, false);
+
+  GetMessageLoop()->PostTask(FROM_HERE,
+                             NewRunnableMethod(this,
+                             &VsyncDispatcher::ChangeList<nsRefreshDriver>,
+                             &mRefreshDriverList,
+                             ansRefreshDriver,
+                             false));
+}
+
+void
+VsyncDispatcher::RegisterVsyncEventParent(VsyncEventParent* aVsyncEventParent)
+{
+  VSYNC_PRINT("RegisterVsyncEventParent");
+
+  // only be called by ipc system, and it ensures be call at vsync dispatch thread.
+  // thus, we don't post a new task to add into the list
+  //MutexAutoLock lock(mRefreshDriverListMutex);
+  //MutexAutoLock lock(mVsyncListenerMutex);
+
+  //ChangeList(&mVsyncEventParentList, mRefreshDriverList, true);
+  //ChangeList(&mVsyncEventParentList, mRefreshDriverList, true);
+
+  GetMessageLoop()->PostTask(FROM_HERE,
+                             NewRunnableMethod(this,
+                             &VsyncDispatcher::ChangeList<VsyncEventParent>,
+                             &mVsyncEventParentList,
+                             aVsyncEventParent,
+                             true));
+}
+
+void
+VsyncDispatcher::UnregisterVsyncEventParent(VsyncEventParent* aVsyncEventParent)
+{
+  VSYNC_PRINT("UnregisterVsyncEventParent");
+
+  // only be called by ipc system, and it ensures be call at vsync dispatch thread.
+  // thus, we don't post a new task to add into the list
+  //MutexAutoLock lock(mRefreshDriverListMutex);
+  //MutexAutoLock lock(mVsyncListenerMutex);
+
+  //ChangeList(&mVsyncEventParentList, mRefreshDriverList, false);
+  //ChangeList(&mVsyncEventParentList, mRefreshDriverList, false);
+
+  GetMessageLoop()->PostTask(FROM_HERE,
+                             NewRunnableMethod(this,
+                             &VsyncDispatcher::ChangeList<VsyncEventParent>,
+                             &mVsyncEventParentList,
+                             aVsyncEventParent,
+                             false));
+}
+
+void
+VsyncDispatcher::NotifyVsync(const VsyncData& aVsyncData)
+{
+  GetMessageLoop()->PostTask(FROM_HERE,
+                             NewRunnableMethod(this,
+                             &VsyncDispatcher::DispatchVsync,
+                             aVsyncData));
+}
+
+void
+VsyncDispatcher::NotifyInputEventProcessed()
+{
+  {
+    MonitorAutoLock inputLock(mInputMonitor);
+
+    inputLock.Notify();
+  }
+
+//  //schedule composition here to reduce the compositor latency
+//#ifdef ENABLE_COMPOSITOR_NOTIFY
+//  //2. compose
+//  Compose(VsyncData(0));
+//#endif
+}
+
+void
+VsyncDispatcher::DispatchVsync(const VsyncData& aVsyncData)
+{
+#ifdef ENABLE_INPUTDISPATCHER_NOTIFY
+  //1. input
+  if (mHasInputDispatcher) {
+    nsCOMPtr<nsIRunnable> mainThreadInputTask =
+        NS_NewRunnableMethodWithArg<const VsyncData&>(this,
+                                                      &VsyncDispatcher::InputEventDispatch,
+                                                      aVsyncData);
+    //block vsync event passing until main thread input module updated
+    MonitorAutoLock inputLock(mInputMonitor);
+
+    NS_DispatchToMainThread(mainThreadInputTask);
+    inputLock.Wait(PR_MillisecondsToInterval(4));
+  }
+#endif
+
+#ifdef ENABLE_COMPOSITOR_NOTIFY
+  //2. compose
+  Compose(aVsyncData);
+#endif
+
+#ifdef ENABLE_REFRESHDRIVER_NOTIFY
+  //3. content process tick
+  NotifyVsyncEventChild(aVsyncData);
+
+  //4. current process tick
+  nsCOMPtr<nsIRunnable> mainThreadTickTask =
+      NS_NewRunnableMethodWithArg<const VsyncData&>(this,
+                                                    &VsyncDispatcher::Tick,
+                                                    aVsyncData);
+  NS_DispatchToMainThread(mainThreadTickTask);
+#endif
+}
+
+void
+VsyncDispatcher::InputEventDispatch(const VsyncData& aVsyncData)
+{
+  MOZ_RELEASE_ASSERT(NS_IsMainThread());
+  //MOZ_ASSERT(NS_IsMainThread());
+
+#ifdef MOZ_WIDGET_GONK
+  DispatchPendingEvent();
+#endif
+}
+
+void
+VsyncDispatcher::Compose(const VsyncData& aVsyncData)
+{
+  MutexAutoLock lock(mCompositorListMutex);
+
+  // CompositorParent::ScheduleComposition is an async call, assume it takes minor
+  // period.
+  for (CompositorList::size_type i = 0; i < mCompositorList.Length(); i++) {
+    layers::CompositorParent *compositor = mCompositorList[i];
+    // TODO: need to change behavior of ScheduleComposition(). No Delay, fire
+    // Composit ASAP.
+    compositor->ScheduleRenderOnCompositorThread();
+  }
+}
+
+void
+VsyncDispatcher::NotifyVsyncEventChild(const VsyncData& aVsyncData)
+{
+  // Tick all registered content process.
+  for (VsyncEventParentList::size_type i = 0; i < mVsyncEventParentList.Length(); i++) {
+    VsyncEventParent* parent = mVsyncEventParentList[i];
+    parent->SendNotifyVsyncEvent(aVsyncData);
+  }
+}
+
+void
+VsyncDispatcher::Tick(const VsyncData& aVsyncData)
+{
+  MOZ_RELEASE_ASSERT(NS_IsMainThread());
+  //MOZ_ASSERT(NS_IsMainThread());
+
+  // Tick all registered refresh drivers.
+  for (RefreshDriverList::size_type i = 0; i < mRefreshDriverList.Length(); i++) {
+    nsRefreshDriver *driver = mRefreshDriverList[i];
+    driver->DoTick();
+  }
+}
+
+} // namespace layers
+} // namespace mozilla
diff --git a/gfx/layers/VsyncDispatcher.h b/gfx/layers/VsyncDispatcher.h
new file mode 100644
--- /dev/null
+++ b/gfx/layers/VsyncDispatcher.h
@@ -0,0 +1,182 @@
+/* -*- Mode: C++; tab-width: 8; indent-tabs-mode: nil; c-basic-offset: 2 -*- */
+/* vim: set sw=2 ts=8 et ft=cpp : */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+#ifndef mozilla_VsyncDispatcher_h
+#define mozilla_VsyncDispatcher_h
+
+#include "mozilla/layers/PVsyncEvent.h"
+#include "mozilla/RefPtr.h"
+#include "mozilla/Monitor.h"
+#include "nsTArray.h"
+
+#include "base/ref_counted.h"
+#include "base/message_loop.h"
+
+class nsRefreshDriver;
+
+namespace base {
+  class Thread;
+}
+
+namespace mozilla {
+namespace layers {
+
+class CompositorParent;
+class VsyncEventParent;
+
+// TODO:
+// Describe the role of this object in vsync routing.
+class VsyncDispatcher : public base::RefCountedThreadSafe<VsyncDispatcher>
+{
+  friend class base::RefCountedThreadSafe<VsyncDispatcher>;
+
+public:
+  class VsyncDispatcherInputProcessingHelper
+  {
+  public:
+    VsyncDispatcherInputProcessingHelper()
+      : mNeedNotify(true)
+    {
+
+    }
+
+    ~VsyncDispatcherInputProcessingHelper()
+    {
+      Notify();
+    }
+
+    void Notify()
+    {
+      if (mNeedNotify) {
+        mNeedNotify = false;
+        VsyncDispatcher::GetInstance()->NotifyInputEventProcessed();
+      }
+    }
+
+  private:
+    bool mNeedNotify;
+  };
+
+  static void StartUpThread();
+  static void StartUpOnExistedThread(MessageLoop* aMessageLoop);
+
+  static VsyncDispatcher* GetInstance();
+
+  // TODO
+  // Find a correct place call Shutdown.
+  static void Shutdown();
+
+  // Get vsync dispatcher thread's message loop
+  MessageLoop* GetMessageLoop();
+
+  // notify all registered vsync observer
+  void NotifyVsync(const VsyncData& aVsyncData);
+
+  // dispatch vsync event
+  void DispatchVsync(const VsyncData& aVsyncData);
+
+  // tell dispatcher to start other remain vsync event passing
+  void NotifyInputEventProcessed();
+
+  // Register input dispatcher.
+  void RegisterInputDispatcher();
+  void UnregisterInputDispatcher();
+
+  // Register compositor.
+  void RegisterCompositer(layers::CompositorParent *aParent);
+  void UnregisterCompositer(layers::CompositorParent *aParent);
+
+  // Register refresh driver.
+  void RegisterRefreshDriver(nsRefreshDriver *aDriver);
+  void UnregisterRefreshDriver(nsRefreshDriver *aDriver);
+
+  // Register content process ipc parent
+  void RegisterVsyncEventParent(VsyncEventParent* aVsyncEventParent);
+  void UnregisterVsyncEventParent(VsyncEventParent* aVsyncEventParent);
+
+private:
+  // Singleton object. Hide constructor and destructor.
+  VsyncDispatcher();
+  ~VsyncDispatcher();
+
+  void SetInputDispatcherInternal(bool aReg);
+
+  // Tell the input dispatcher to handle input event.
+  void InputEventDispatch(const VsyncData& aVsyncData);
+
+  // Tell compositors to do composition.
+  void Compose(const VsyncData& aVsyncData);
+
+  // Sent vsync event to VsyncEventChild
+  void NotifyVsyncEventChild(const VsyncData& aVsyncData);
+
+  // Tick refresh driver.
+  void Tick(const VsyncData& aVsyncData);
+
+  // Return total registered object number.
+  int GetRegistedObjectCount() const;
+
+  // Check the observer number to enable/disable vsync notification
+  void CheckVsyncNotification();
+
+  template <typename Type>
+  void ChangeList(nsTArray<Type*>* aList, Type* aItem, bool aAdd)
+  {
+    typedef nsTArray<Type*> ArrayType;
+
+    if (aAdd) {
+      //MOZ_RELEASE_ASSERT(!aList->Contains(aItem));
+      //MOZ_ASSERT(!aList->Contains(aItem));
+
+      if (!aList->Contains(aItem)) {
+        aList->AppendElement(aItem);
+      }
+    }
+    else {
+      typename ArrayType::index_type index = aList->IndexOf(aItem);
+      //MOZ_RELEASE_ASSERT(index != ArrayType::NoIndex);
+      //MOZ_ASSERT(index != ArrayType::NoIndex);
+
+      if (index != ArrayType::NoIndex) {
+        aList->RemoveElementAt(index);
+      }
+    }
+
+    CheckVsyncNotification();
+  }
+
+private:
+  // Registered compositors
+  typedef nsTArray<layers::CompositorParent*> CompositorList;
+  CompositorList mCompositorList;
+  Mutex mCompositorListMutex;
+
+  // Registered refresh drivers.
+  typedef nsTArray<nsRefreshDriver*> RefreshDriverList;
+  RefreshDriverList mRefreshDriverList;
+  Mutex mRefreshDriverListMutex;
+
+  // Registered vsync ipc parent
+  typedef nsTArray<VsyncEventParent*> VsyncEventParentList;
+  VsyncEventParentList mVsyncEventParentList;
+  Mutex mVsyncEventParentListMutex;
+
+  // Sent vsync event to input dispatcher.
+  bool mHasInputDispatcher;
+  Mutex mHasInputDispatcherMutex;
+
+  Mutex mVsyncListenerMutex;
+
+  // Monotir for b2g main thread input event processing
+  Monitor mInputMonitor;
+
+  bool mEnableVsyncNotification;
+};
+
+} // namespace layers
+} // namespace mozilla
+
+#endif // mozilla_VsyncDispatcher_h
diff --git a/gfx/layers/moz.build b/gfx/layers/moz.build
--- a/gfx/layers/moz.build
+++ b/gfx/layers/moz.build
@@ -34,16 +34,17 @@ EXPORTS += [
     'LayerSorter.h',
     'LayerTreeInvalidation.h',
     'opengl/Composer2D.h',
     'opengl/OGLShaderProgram.h',
     'opengl/TexturePoolOGL.h',
     'ReadbackLayer.h',
     'SharedTextureImage.h',
     'TiledLayerBuffer.h',
+    'VsyncDispatcher.h',
 ]
 
 if CONFIG['MOZ_WIDGET_TOOLKIT'] == 'windows':
     UNIFIED_SOURCES += [
         'D3D9SurfaceImage.cpp',
     ]
     if CONFIG['MOZ_ENABLE_D3D9_LAYER']:
         EXPORTS += [
@@ -304,16 +305,17 @@ UNIFIED_SOURCES += [
     'opengl/CompositorOGL.cpp',
     'opengl/OGLShaderProgram.cpp',
     'opengl/TextureClientOGL.cpp',
     'opengl/TextureHostOGL.cpp',
     'opengl/TexturePoolOGL.cpp',
     'ReadbackProcessor.cpp',
     'RenderTrace.cpp',
     'RotatedBuffer.cpp',
+    'VsyncDispatcher.cpp',
     'YCbCrImageDataSerializer.cpp',
 ]
 
 SOURCES += [
     'basic/BasicImageLayer.cpp',
     'ImageContainer.cpp',
     'Layers.cpp',
     'LayerTreeInvalidation.cpp',
diff --git a/layout/base/nsRefreshDriver.cpp b/layout/base/nsRefreshDriver.cpp
--- a/layout/base/nsRefreshDriver.cpp
+++ b/layout/base/nsRefreshDriver.cpp
@@ -44,17 +44,20 @@
 #include "nsPerformance.h"
 #include "mozilla/dom/WindowBinding.h"
 #include "RestyleManager.h"
 #include "Layers.h"
 #include "imgIContainer.h"
 #include "nsIFrameRequestCallback.h"
 #include "mozilla/dom/ScriptSettings.h"
 
+#include "VsyncDispatcher.h"
+
 using namespace mozilla;
+using namespace mozilla::layers;
 using namespace mozilla::widget;
 
 #ifdef PR_LOGGING
 static PRLogModuleInfo *gLog = nullptr;
 #define LOG(...) PR_LOG(gLog, PR_LOG_NOTICE, (__VA_ARGS__))
 #else
 #define LOG(...) do { } while(0)
 #endif
@@ -184,16 +187,61 @@ protected:
   // bacause of c++ protected shenanigans
   static void TimerTick(nsITimer* aTimer, void* aClosure)
   {
     RefreshDriverTimer *timer = static_cast<RefreshDriverTimer*>(aClosure);
     timer->Tick();
   }
 };
 
+// After register this nsRefreshDriver into VsyncDispatcher, VsyncDispatcher
+// calls nsRefereshDriver::Tick function while vsync event recieve.
+// The only reason to construct this Timer is to minimize code change in
+// nsRefreshDriver.
+class VsyncRefreshDriverTimer :
+    public RefreshDriverTimer
+{
+public:
+  VsyncRefreshDriverTimer(double aRate)
+    : RefreshDriverTimer(aRate)
+  {
+    // Do nothing.
+  }
+
+  virtual ~VsyncRefreshDriverTimer()
+  {
+    // Do nothing.
+  }
+
+  virtual void AddRefreshDriver(nsRefreshDriver* aDriver)
+  {
+    // VsyncDispatcher manages registered refresh driver in a list.
+    // We don't have to add this driver into RefreshDriverTimer's
+    // list anymore.
+    VsyncDispatcher::GetInstance()->RegisterRefreshDriver(aDriver);
+  }
+
+  virtual void RemoveRefreshDriver(nsRefreshDriver* aDriver)
+  {
+    VsyncDispatcher::GetInstance()->UnregisterRefreshDriver(aDriver);
+  }
+
+protected:
+  virtual void StartTimer()
+  {
+    mLastFireEpoch = JS_Now();
+    mLastFireTime = TimeStamp::Now();
+
+    mTargetTime = mLastFireTime + mRateDuration;
+  }
+
+  virtual void StopTimer() { }
+  virtual void ScheduleNextTick(TimeStamp aNowTime) { }
+};
+
 /*
  * A RefreshDriverTimer that uses a nsITimer as the underlying timer.  Note that
  * this is a ONE_SHOT timer, not a repeating one!  Subclasses are expected to
  * implement ScheduleNextTick and intelligently calculate the next time to tick,
  * and to reset mTimer.  Using a repeating nsITimer gets us into a lot of pain
  * with its attempt at intelligent slack removal and such, so we don't do it.
  */
 class SimpleTimerBasedRefreshDriverTimer :
@@ -559,17 +607,17 @@ GetFirstFrameDelay(imgIRequest* req)
   // If this image isn't animated, there isn't a first frame delay.
   int32_t delay = container->GetFirstFrameDelay();
   if (delay < 0)
     return 0;
 
   return static_cast<uint32_t>(delay);
 }
 
-static PreciseRefreshDriverTimer *sRegularRateTimer = nullptr;
+static RefreshDriverTimer         *sRegularRateTimer = nullptr;
 static InactiveRefreshDriverTimer *sThrottledRateTimer = nullptr;
 
 #ifdef XP_WIN
 static int32_t sHighPrecisionTimerRequests = 0;
 // a bare pointer to avoid introducing a static constructor
 static nsITimer *sDisableHighPrecisionTimersTimer = nullptr;
 #endif
 
@@ -664,23 +712,29 @@ nsRefreshDriver::ChooseTimer() const
       sThrottledRateTimer = new InactiveRefreshDriverTimer(GetThrottledTimerInterval(),
                                                            DEFAULT_INACTIVE_TIMER_DISABLE_SECONDS * 1000.0);
     return sThrottledRateTimer;
   }
 
   if (!sRegularRateTimer) {
     bool isDefault = true;
     double rate = GetRegularTimerInterval(&isDefault);
+
+    if (Preferences::GetBool("hal.hw-vsync", true)) {
+      sRegularRateTimer = new VsyncRefreshDriverTimer(rate);
+    }
+    else {
 #ifdef XP_WIN
-    if (PreciseRefreshDriverTimerWindowsDwmVsync::IsSupported()) {
-      sRegularRateTimer = new PreciseRefreshDriverTimerWindowsDwmVsync(rate, isDefault);
-    }
+      if (PreciseRefreshDriverTimerWindowsDwmVsync::IsSupported()) {
+        sRegularRateTimer = new PreciseRefreshDriverTimerWindowsDwmVsync(rate, isDefault);
+      }
 #endif
-    if (!sRegularRateTimer) {
-      sRegularRateTimer = new PreciseRefreshDriverTimer(rate);
+      if (!sRegularRateTimer) {
+        sRegularRateTimer = new PreciseRefreshDriverTimer(rate);
+      }
     }
   }
   return sRegularRateTimer;
 }
 
 nsRefreshDriver::nsRefreshDriver(nsPresContext* aPresContext)
   : mActiveTimer(nullptr),
     mReflowCause(nullptr),
diff --git a/widget/gonk/nsAppShell.cpp b/widget/gonk/nsAppShell.cpp
--- a/widget/gonk/nsAppShell.cpp
+++ b/widget/gonk/nsAppShell.cpp
@@ -37,16 +37,17 @@
 #ifdef MOZ_OMX_DECODER
 #include "MediaResourceManagerService.h"
 #endif
 #include "mozilla/TouchEvents.h"
 #include "mozilla/FileUtils.h"
 #include "mozilla/Hal.h"
 #include "mozilla/MouseEvents.h"
 #include "mozilla/Mutex.h"
+#include "mozilla/Monitor.h"
 #include "mozilla/Services.h"
 #include "mozilla/TextEvents.h"
 #if ANDROID_VERSION >= 18
 #include "nativewindow/FakeSurfaceComposer.h"
 #endif
 #include "nsAppShell.h"
 #include "mozilla/dom/Touch.h"
 #include "nsGkAtoms.h"
@@ -58,16 +59,19 @@
 #include "OrientationObserver.h"
 #include "GonkMemoryPressureMonitoring.h"
 
 #include "android/log.h"
 #include "libui/EventHub.h"
 #include "libui/InputReader.h"
 #include "libui/InputDispatcher.h"
 #include "cutils/properties.h"
+#include "mozilla/Preferences.h"
+
+#include "VsyncDispatcher.h"
 
 #ifdef MOZ_NUWA_PROCESS
 #include "ipc/Nuwa.h"
 #endif
 
 #include "mozilla/Preferences.h"
 #include "GeckoProfiler.h"
 
@@ -84,16 +88,17 @@
     (void)0
 #endif
 
 using namespace android;
 using namespace mozilla;
 using namespace mozilla::dom;
 using namespace mozilla::services;
 using namespace mozilla::widget;
+using namespace mozilla::layers;
 
 bool gDrawRequest = false;
 static nsAppShell *gAppShell = nullptr;
 static int epollfd = 0;
 static int signalfds[2] = {0};
 static bool sDevInputAudioJack;
 static int32_t sHeadphoneState;
 static int32_t sMicrophoneState;
@@ -105,16 +110,20 @@ NS_IMPL_ISUPPORTS_INHERITED(nsAppShell, 
 
 static uint64_t
 nanosecsToMillisecs(nsecs_t nsecs)
 {
     return nsecs / 1000000;
 }
 
 namespace mozilla {
+void DispatchPendingEvent()
+{
+    gAppShell->DispatchPendingEvent();
+}
 
 bool ProcessNextEvent()
 {
     return gAppShell->ProcessNextNativeEvent(true);
 }
 
 void NotifyEvent()
 {
@@ -211,16 +220,41 @@ sendMouseEvent(uint32_t msg, UserInputDa
         event.clickCount = 1;
     event.modifiers = data.DOMModifiers();
 
     event.mFlags.mNoCrossProcessBoundaryForwarding = !forwardToChildren;
 
     nsWindow::DispatchInputEvent(event);
 }
 
+static void 
+sendMouseEvent(UserInputData& data, bool forwardToChildren)
+{
+     uint32_t msg;
+         
+    switch (data.action & AMOTION_EVENT_ACTION_MASK) {
+        case AMOTION_EVENT_ACTION_DOWN:
+            msg = NS_MOUSE_BUTTON_DOWN;
+            break;
+        case AMOTION_EVENT_ACTION_POINTER_DOWN:
+        case AMOTION_EVENT_ACTION_POINTER_UP:
+        case AMOTION_EVENT_ACTION_MOVE:
+        case AMOTION_EVENT_ACTION_HOVER_MOVE:
+            msg = NS_MOUSE_MOVE;
+            break;
+        case AMOTION_EVENT_ACTION_OUTSIDE:
+        case AMOTION_EVENT_ACTION_CANCEL:
+        case AMOTION_EVENT_ACTION_UP:
+            msg = NS_MOUSE_BUTTON_UP;
+            break;
+    }
+
+    sendMouseEvent(msg, data, forwardToChildren);
+}
+
 static void
 addDOMTouch(UserInputData& data, WidgetTouchEvent& event, int i)
 {
     const ::Touch& touch = data.motion.touches[i];
     event.touches.AppendElement(
         new dom::Touch(touch.id,
                        nsIntPoint(floor(touch.coords.getX() + 0.5), floor(touch.coords.getY() + 0.5)),
                        nsIntPoint(touch.coords.getAxisValue(AMOTION_EVENT_AXIS_SIZE),
@@ -597,16 +631,17 @@ public:
         : mQueueLock("GeckoInputDispatcher::mQueueMutex")
         , mEventHub(aEventHub)
         , mTouchDownCount(0)
         , mKeyDownCount(0)
         , mTouchEventsFiltered(false)
         , mKeyEventsFiltered(false)
     {
       mEnabledUniformityInfo = Preferences::GetBool("layers.uniformity-info", false);
+      mEnableVsyncNotification = Preferences::GetBool("hal.hw-vsync", true);
     }
 
     virtual void dump(String8& dump);
 
     virtual void monitor() {}
 
     // Called on the main thread
     virtual void dispatchOnce();
@@ -629,35 +664,41 @@ public:
     virtual void setInputFilterEnabled(bool enabled) {}
     virtual bool transferTouchFocus(const sp<InputChannel>& fromChannel,
             const sp<InputChannel>& toChannel) { return true; }
 
     virtual status_t registerInputChannel(const sp<InputChannel>& inputChannel,
             const sp<InputWindowHandle>& inputWindowHandle, bool monitor);
     virtual status_t unregisterInputChannel(const sp<InputChannel>& inputChannel);
 
-
+    void dispatchPendingEvents();
 
 protected:
     virtual ~GeckoInputDispatcher() {}
+    void sendTouchOrMouseEvent(UserInputData& data);
+    UserInputData resample();
 
 private:
     // mQueueLock should generally be locked while using mEventQueue.
     // UserInputData is pushed on on the InputReaderThread and
     // popped and dispatched on the main thread.
     mozilla::Mutex mQueueLock;
     std::queue<UserInputData> mEventQueue;
     sp<EventHub> mEventHub;
 
     int mTouchDownCount;
     int mKeyDownCount;
     bool mTouchEventsFiltered;
     bool mKeyEventsFiltered;
     BitSet32 mTouchDown;
     bool mEnabledUniformityInfo;
+
+    bool mEnableVsyncNotification;
+    std::vector<UserInputData> mTouchMoveSamples;
+    std::vector<UserInputData> mTouchUpSamples;
 };
 
 // GeckoInputReaderPolicy
 void
 GeckoInputReaderPolicy::setDisplayInfo()
 {
     static_assert(nsIScreen::ROTATION_0_DEG ==
                   DISPLAY_ORIENTATION_0,
@@ -703,16 +744,81 @@ GeckoInputDispatcher::dump(String8& dump
 static bool
 isExpired(const UserInputData& data)
 {
     uint64_t timeNowMs =
         nanosecsToMillisecs(systemTime(SYSTEM_TIME_MONOTONIC));
     return (timeNowMs - data.timeMs) > kInputExpirationThresholdMs;
 }
 
+void GeckoInputDispatcher::dispatchPendingEvents()
+{
+    // Touch up recieve, this stroke is dead.
+    if (!mTouchUpSamples.empty()) {
+        sendTouchOrMouseEvent(mTouchUpSamples[0]);
+        VsyncDispatcher::GetInstance()->UnregisterInputDispatcher();
+        // Discard all pending events.
+        mTouchMoveSamples.clear();
+        mTouchUpSamples.clear();
+    }
+    // Receive mouse move events.
+    else if (!mTouchMoveSamples.empty()) {
+        UserInputData sample = resample();
+        sendTouchOrMouseEvent(sample);
+    }
+}
+
+UserInputData
+GeckoInputDispatcher::resample()
+{
+    // Three conditions
+    // 1. No touch move event - if this happens, either vsync event is too quick 
+    //     or touch event is too slow. Not a normal case.
+    // 2. 1 ~ 2 touch evnets: in the case that vsync refresh rate is 60 FPS and 
+    //     touch dirver refresh rate is 100 FPS. Pretty normal condition.
+    // 3. Move then 3 touch events: if this happens, either vsync event is too 
+    //     slow or  touch event is too quick. Not a normal case.
+    
+    if (mTouchMoveSamples.size() == 1) {
+        return mTouchMoveSamples[0];
+    }
+
+    UserInputData begin = mTouchMoveSamples.front();
+    UserInputData end = mTouchMoveSamples.back();
+    
+    uint64_t now = ns2ms(systemTime(SYSTEM_TIME_MONOTONIC));
+    float timeFactor = (now - begin.timeMs) / static_cast<float>(end.timeMs - begin.timeMs);
+    int strokes = std::min(end.motion.touchCount, begin.motion.touchCount);
+
+    UserInputData sample = end;
+    for (int i = 0; i < strokes; i++) {        
+        const ::Touch& begineTouch = begin.motion.touches[i];
+        const ::Touch& endTouch = end.motion.touches[i]; 
+        float x = begineTouch.coords.getX() + timeFactor * (endTouch.coords.getX() - begineTouch.coords.getX() );
+        float y = begineTouch.coords.getY() + timeFactor * (endTouch.coords.getY() - begineTouch.coords.getY() );
+         
+        sample.motion.touches[i].coords.setAxisValue(AMOTION_EVENT_AXIS_X, x);
+        sample.motion.touches[i].coords.setAxisValue(AMOTION_EVENT_AXIS_Y, y);
+    }
+    mTouchMoveSamples.clear();
+
+    // Push the last move event back to pending buffer for the next vsync notification.
+    mTouchMoveSamples.push_back(end);
+    return sample;
+}
+
+void GeckoInputDispatcher::sendTouchOrMouseEvent(UserInputData& data)
+{
+    bool captured;
+    nsEventStatus status = sendTouchEvent(data, &captured);
+    if (captured)
+        return;
+    sendMouseEvent(data, status != nsEventStatus_eConsumeNoDefault);
+}
+
 void
 GeckoInputDispatcher::dispatchOnce()
 {
     UserInputData data;
     {
         MutexAutoLock lock(mQueueLock);
         if (mEventQueue.empty())
             return;
@@ -758,16 +864,34 @@ GeckoInputDispatcher::dispatchOnce()
         }
 
         if (mTouchEventsFiltered) {
             return;
         }
 
         nsEventStatus status = nsEventStatus_eIgnore;
         if (action != AMOTION_EVENT_ACTION_HOVER_MOVE) {
+            if (mEnableVsyncNotification) {
+                // TODO: for prototype, I handle only primary touch pointer
+                switch (data.action & AMOTION_EVENT_ACTION_MASK) {
+                case AMOTION_EVENT_ACTION_DOWN:
+                  // Register vsync niotification.
+                  VsyncDispatcher::GetInstance()->RegisterInputDispatcher();
+                  break;
+                case AMOTION_EVENT_ACTION_MOVE:
+                    // Buffering move samples
+                    mTouchMoveSamples.push_back(data);
+                    return;
+                case AMOTION_EVENT_ACTION_UP:
+                    // Buffering up samples
+                    mTouchUpSamples.push_back(data);
+                    return;
+               }
+            }
+
             bool captured;
             status = sendTouchEvent(data, &captured);
             if (mEnabledUniformityInfo) {
                 printUniformityInfo(data);
             }
             if (captured) {
                 return;
             }
@@ -867,16 +991,17 @@ GeckoInputDispatcher::notifyMotion(const
            ((mEventQueue.back().action & AMOTION_EVENT_ACTION_MASK) ==
              AMOTION_EVENT_ACTION_MOVE ||
             (mEventQueue.back().action & AMOTION_EVENT_ACTION_MASK) ==
              AMOTION_EVENT_ACTION_HOVER_MOVE))
             mEventQueue.back() = data;
         else
             mEventQueue.push(data);
     }
+
     gAppShell->NotifyNativeEvent();
 }
 
 
 
 void GeckoInputDispatcher::notifySwitch(const NotifySwitchArgs* args)
 {
     if (!sDevInputAudioJack)
@@ -1092,16 +1217,22 @@ nsAppShell::AddFdHandler(int fd, FdHandl
 
 void
 nsAppShell::ScheduleNativeEventCallback()
 {
     mNativeCallbackRequest = true;
     NotifyEvent();
 }
 
+void 
+nsAppShell::DispatchPendingEvent()
+{
+    mDispatcher->dispatchPendingEvents();
+}
+
 bool
 nsAppShell::ProcessNextNativeEvent(bool mayWait)
 {
     PROFILER_LABEL("nsAppShell", "ProcessNextNativeEvent",
         js::ProfileEntry::Category::EVENTS);
 
     epoll_event events[16] = {{ 0 }};
 
diff --git a/widget/gonk/nsAppShell.h b/widget/gonk/nsAppShell.h
--- a/widget/gonk/nsAppShell.h
+++ b/widget/gonk/nsAppShell.h
@@ -20,16 +20,19 @@
 
 #include "mozilla/Mutex.h"
 #include "nsBaseAppShell.h"
 #include "nsTArray.h"
 
 #include "utils/RefBase.h"
 
 namespace mozilla {
+class Monitor;
+
+void DispatchPendingEvent();
 bool ProcessNextEvent();
 void NotifyEvent();
 }
 
 extern bool gDrawRequest;
 
 class FdHandler;
 typedef void(*FdHandlerCallback)(int, FdHandler *);
@@ -68,17 +71,18 @@ public:
 
     nsresult Init();
 
     NS_IMETHOD Exit() MOZ_OVERRIDE;
 
     virtual bool ProcessNextNativeEvent(bool maywait);
 
     void NotifyNativeEvent();
-
+    void DispatchPendingEvent();
+    
     static void NotifyScreenInitialized();
     static void NotifyScreenRotation();
 
 protected:
     virtual ~nsAppShell();
 
     virtual void ScheduleNativeEventCallback();
 
diff --git a/widget/gonk/nsWindow.cpp b/widget/gonk/nsWindow.cpp
--- a/widget/gonk/nsWindow.cpp
+++ b/widget/gonk/nsWindow.cpp
@@ -44,16 +44,17 @@
 #include "libdisplay/GonkDisplay.h"
 #include "pixelflinger/format.h"
 #include "mozilla/BasicEvents.h"
 #include "mozilla/layers/APZCTreeManager.h"
 #include "mozilla/layers/CompositorParent.h"
 #include "ParentProcessController.h"
 #include "nsThreadUtils.h"
 #include "HwcComposer2D.h"
+#include "VsyncDispatcher.h"
 
 #define LOG(args...)  __android_log_print(ANDROID_LOG_INFO, "Gonk" , ## args)
 #define LOGW(args...) __android_log_print(ANDROID_LOG_WARN, "Gonk", ## args)
 #define LOGE(args...) __android_log_print(ANDROID_LOG_ERROR, "Gonk", ## args)
 
 #define IS_TOPLEVEL() (mWindowType == eWindowType_toplevel || mWindowType == eWindowType_dialog)
 
 using namespace mozilla;
@@ -238,16 +239,18 @@ nsWindow::DoDraw(void)
     if (listener) {
         listener->DidPaintWindow();
     }
 }
 
 nsEventStatus
 nsWindow::DispatchInputEvent(WidgetGUIEvent& aEvent, bool* aWasCaptured)
 {
+    VsyncDispatcher::VsyncDispatcherInputProcessingHelper inputHelper;
+
     if (aWasCaptured) {
         *aWasCaptured = false;
     }
     if (!gFocusedWindow) {
         return nsEventStatus_eIgnore;
     }
 
     gFocusedWindow->UserActivity();
@@ -259,16 +262,18 @@ nsWindow::DispatchInputEvent(WidgetGUIEv
         if (aWasCaptured) {
             *aWasCaptured = captured;
         }
         if (captured) {
             return nsEventStatus_eConsumeNoDefault;
         }
     }
 
+    inputHelper.Notify();
+
     nsEventStatus status;
     gFocusedWindow->DispatchEvent(&aEvent, status);
     return status;
 }
 
 NS_IMETHODIMP
 nsWindow::Create(nsIWidget *aParent,
                  void *aNativeParent,
diff --git a/widget/xpwidgets/moz.build b/widget/xpwidgets/moz.build
--- a/widget/xpwidgets/moz.build
+++ b/widget/xpwidgets/moz.build
@@ -4,16 +4,17 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 EXPORTS += [
     'ContentHelper.h',
     'GfxDriverInfo.h',
     'GfxInfoBase.h',
     'GfxInfoCollector.h',
+    'nsBaseAppShell.h'
 ]
 
 UNIFIED_SOURCES += [
     'ContentHelper.cpp',
     'GfxDriverInfo.cpp',
     'GfxInfoBase.cpp',
     'GfxInfoCollector.cpp',
     'GfxInfoWebGL.cpp',
