# HG changeset patch
# Parent cd521255bf8ef5d9012f41f6122356df852d605e
# User Jerry Shih <hshih@mozilla.com>
Trigger refresh driver tick() when vsync comes.

diff --git a/layout/base/nsRefreshDriver.cpp b/layout/base/nsRefreshDriver.cpp
--- a/layout/base/nsRefreshDriver.cpp
+++ b/layout/base/nsRefreshDriver.cpp
@@ -44,17 +44,22 @@
 #include "nsPerformance.h"
 #include "mozilla/dom/WindowBinding.h"
 #include "RestyleManager.h"
 #include "Layers.h"
 #include "imgIContainer.h"
 #include "nsIFrameRequestCallback.h"
 #include "mozilla/dom/ScriptSettings.h"
 
+#ifdef MOZ_WIDGET_GONK
+#include "GonkVsyncDispatcher.h"
+#endif
+
 using namespace mozilla;
+using namespace mozilla::layers;
 using namespace mozilla::widget;
 
 #ifdef PR_LOGGING
 static PRLogModuleInfo *gLog = nullptr;
 #define LOG(...) PR_LOG(gLog, PR_LOG_NOTICE, (__VA_ARGS__))
 #else
 #define LOG(...) do { } while(0)
 #endif
@@ -138,16 +143,60 @@ RefreshDriverTimer::Tick()
 
 /*static*/ void
 RefreshDriverTimer::TickDriver(nsRefreshDriver* driver, int64_t jsnow, TimeStamp now)
 {
   LOG(">> TickDriver: %p (jsnow: %lld)", driver, jsnow);
   driver->Tick(jsnow, now);
 }
 
+#ifdef MOZ_WIDGET_GONK
+class GonkVsyncRefreshDriverTimer MOZ_FINAL :
+    public VsyncRefreshDriverTimer
+{
+public:
+  GonkVsyncRefreshDriverTimer(double aRate)
+    : VsyncRefreshDriverTimer(aRate)
+  {
+  }
+
+  virtual ~GonkVsyncRefreshDriverTimer()
+  {
+    StopTimer();
+  }
+
+private:
+  virtual void StartTimer() MOZ_OVERRIDE
+  {
+    // pretend we just fired, and we schedule the next tick normally
+    mLastFireEpoch = JS_Now();
+    mLastFireTime = TimeStamp::Now();
+
+    mTargetTime = mLastFireTime + mRateDuration;
+
+    GonkVsyncDispatcher::GetInstance()->RegisterRefreshDriverTimer(this);
+  }
+
+  virtual void StopTimer() MOZ_OVERRIDE
+  {
+    GonkVsyncDispatcher::GetInstance()->UnregisterRefreshDriverTimer(this);
+  }
+
+  virtual void  ScheduleNextTick(TimeStamp aNowTime) MOZ_OVERRIDE
+  {
+    // We use hwc to trigger Tick(), so we do nothing in this function
+  }
+
+  virtual void Tick(int64_t aTimestame, int32_t frameNumber) MOZ_OVERRIDE
+  {
+    VsyncRefreshDriverTimer::Tick();
+  }
+};
+#endif
+
 /*
  * A RefreshDriverTimer that uses a nsITimer as the underlying timer.  Note that
  * this is a ONE_SHOT timer, not a repeating one!  Subclasses are expected to
  * implement ScheduleNextTick and intelligently calculate the next time to tick,
  * and to reset mTimer.  Using a repeating nsITimer gets us into a lot of pain
  * with its attempt at intelligent slack removal and such, so we don't do it.
  */
 class SimpleTimerBasedRefreshDriverTimer :
@@ -513,17 +562,17 @@ GetFirstFrameDelay(imgIRequest* req)
   // If this image isn't animated, there isn't a first frame delay.
   int32_t delay = container->GetFirstFrameDelay();
   if (delay < 0)
     return 0;
 
   return static_cast<uint32_t>(delay);
 }
 
-static PreciseRefreshDriverTimer *sRegularRateTimer = nullptr;
+static RefreshDriverTimer         *sRegularRateTimer = nullptr;
 static InactiveRefreshDriverTimer *sThrottledRateTimer = nullptr;
 
 #ifdef XP_WIN
 static int32_t sHighPrecisionTimerRequests = 0;
 // a bare pointer to avoid introducing a static constructor
 static nsITimer *sDisableHighPrecisionTimersTimer = nullptr;
 #endif
 
@@ -618,19 +667,25 @@ nsRefreshDriver::ChooseTimer() const
       sThrottledRateTimer = new InactiveRefreshDriverTimer(GetThrottledTimerInterval(),
                                                            DEFAULT_INACTIVE_TIMER_DISABLE_SECONDS * 1000.0);
     return sThrottledRateTimer;
   }
 
   if (!sRegularRateTimer) {
     bool isDefault = true;
     double rate = GetRegularTimerInterval(&isDefault);
-#ifdef XP_WIN
+
+#ifdef MOZ_WIDGET_GONK
+    if (Preferences::GetBool("gfx.hw-vsync", true)) {
+      sRegularRateTimer = new GonkVsyncRefreshDriverTimer(rate);
+    }
+#elif defined(XP_WIN)
     if (PreciseRefreshDriverTimerWindowsDwmVsync::IsSupported()) {
-      sRegularRateTimer = new PreciseRefreshDriverTimerWindowsDwmVsync(rate, isDefault);
+      sRegularRateTimer = new PreciseRefreshDriverTimerWindowsDwmVsync(rate,
+          isDefault);
     }
 #endif
     if (!sRegularRateTimer) {
       sRegularRateTimer = new PreciseRefreshDriverTimer(rate);
     }
   }
   return sRegularRateTimer;
 }
diff --git a/layout/base/nsRefreshDriver.h b/layout/base/nsRefreshDriver.h
--- a/layout/base/nsRefreshDriver.h
+++ b/layout/base/nsRefreshDriver.h
@@ -460,17 +460,26 @@ class VsyncRefreshDriverTimer :
 public:
   VsyncRefreshDriverTimer(double aRate)
     : RefreshDriverTimer(aRate)
   {
   }
 
   virtual ~VsyncRefreshDriverTimer()
   {
-    StopTimer();
   }
 
   virtual void Tick(int64_t aTimestame, int32_t frameNumber) = 0;
+
+protected:
+  virtual void StartTimer() = 0;
+  virtual void StopTimer() = 0;
+  virtual void ScheduleNextTick(TimeStamp aNowTime) = 0;
+
+  void Tick()
+  {
+    RefreshDriverTimer::Tick();
+  }
 };
 
 } //mozilla
 
 #endif /* !defined(nsRefreshDriver_h_) */
