# HG changeset patch
# Parent 431ff8d833e68a51591907489090183a8aba35c6
# User Jerry Shih <hshih@mozilla.com>
cache tmp surface buffer

diff --git a/gfx/layers/composite/ContainerLayerComposite.cpp b/gfx/layers/composite/ContainerLayerComposite.cpp
--- a/gfx/layers/composite/ContainerLayerComposite.cpp
+++ b/gfx/layers/composite/ContainerLayerComposite.cpp
@@ -202,16 +202,20 @@ static void DrawVelGraph(const nsIntRect
 
 }
 
 template<class ContainerT> void
 ContainerRender(ContainerT* aContainer,
                 LayerManagerComposite* aManager,
                 const nsIntRect& aClipRect)
 {
+
+  //RefPtr<CompositingRenderTarget> mCacheSurface;
+  //gfx::IntRect mCacheSurfaceRect;
+
   /**
    * Setup our temporary surface for rendering the contents of this container.
    */
   RefPtr<CompositingRenderTarget> surface;
 
   Compositor* compositor = aManager->GetCompositor();
 
   RefPtr<CompositingRenderTarget> previousTarget = compositor->GetCurrentRenderTarget();
@@ -223,16 +227,17 @@ ContainerRender(ContainerT* aContainer,
   float opacity = aContainer->GetEffectiveOpacity();
 
   bool needsSurface = aContainer->UseIntermediateSurface();
 
   {
   PROFILER_LABEL("ContainerLayerComposite", "ContainerRender 1");
 
   if (needsSurface) {
+    printf_stderr("bignose needsurface");
     SurfaceInitMode mode = INIT_MODE_CLEAR;
     bool surfaceCopyNeeded = false;
     gfx::IntRect surfaceRect = gfx::IntRect(visibleRect.x, visibleRect.y,
                                             visibleRect.width, visibleRect.height);
     gfx::IntPoint sourcePoint = gfx::IntPoint(visibleRect.x, visibleRect.y);
     // we're about to create a framebuffer backed by textures to use as an intermediate
     // surface. What to do if its size (as given by framebufferRect) would exceed the
     // maximum texture size supported by the GL? The present code chooses the compromise
@@ -266,23 +271,39 @@ ContainerRender(ContainerT* aContainer,
     }
 
     sourcePoint -= compositor->GetCurrentRenderTarget()->GetOrigin();
 
     if (surfaceCopyNeeded) {
       {
       PROFILER_LABEL("ContainerLayerComposite", "ContainerRender 1-1");
 
-      surface = compositor->CreateRenderTargetFromSource(surfaceRect, previousTarget, sourcePoint);
+      if(surfaceRect.IsEqualEdges(aContainer->mCacheSurfaceRect)){
+        surface=aContainer->mCacheSurface;
+      }
+      else{
+        surface = compositor->CreateRenderTargetFromSource(surfaceRect, previousTarget, sourcePoint);
+        aContainer->mCacheSurface=surface;
+        aContainer->mCacheSurfaceRect=surfaceRect;
+      }
 
       }
     } else {
       {
       PROFILER_LABEL("ContainerLayerComposite", "ContainerRender 1-2");
-      surface = compositor->CreateRenderTarget(surfaceRect, mode);
+
+      if(surfaceRect.IsEqualEdges(aContainer->mCacheSurfaceRect)){
+        surface=aContainer->mCacheSurface;
+      }
+      else{
+        surface = compositor->CreateRenderTarget(surfaceRect, mode);
+        aContainer->mCacheSurface=surface;
+        aContainer->mCacheSurfaceRect=surfaceRect;
+      }
+
       }
     }
 
     if (!surface) {
       return;
     }
 
     compositor->SetRenderTarget(surface);
@@ -408,16 +429,19 @@ ContainerRender(ContainerT* aContainer,
 }
 
 ContainerLayerComposite::ContainerLayerComposite(LayerManagerComposite *aManager)
   : ContainerLayer(aManager, nullptr)
   , LayerComposite(aManager)
 {
   MOZ_COUNT_CTOR(ContainerLayerComposite);
   mImplData = static_cast<LayerComposite*>(this);
+
+  mCacheSurface=nullptr;
+  mCacheSurfaceRect=gfx::IntRect(0,0,0,0);
 }
 
 ContainerLayerComposite::~ContainerLayerComposite()
 {
   MOZ_COUNT_DTOR(ContainerLayerComposite);
 
   // We don't Destroy() on destruction here because this destructor
   // can be called after remote content has crashed, and it may not be
@@ -471,16 +495,19 @@ ContainerLayerComposite::CleanupResource
   }
 }
 
 RefLayerComposite::RefLayerComposite(LayerManagerComposite* aManager)
   : RefLayer(aManager, nullptr)
   , LayerComposite(aManager)
 {
   mImplData = static_cast<LayerComposite*>(this);
+
+  mCacheSurface=nullptr;
+  mCacheSurfaceRect=gfx::IntRect(0,0,0,0);
 }
 
 RefLayerComposite::~RefLayerComposite()
 {
   Destroy();
 }
 
 void
diff --git a/gfx/layers/composite/ContainerLayerComposite.h b/gfx/layers/composite/ContainerLayerComposite.h
--- a/gfx/layers/composite/ContainerLayerComposite.h
+++ b/gfx/layers/composite/ContainerLayerComposite.h
@@ -13,16 +13,17 @@
 class gfx3DMatrix;
 struct nsIntPoint;
 struct nsIntRect;
 
 namespace mozilla {
 namespace layers {
 
 class CompositableHost;
+class CompositingRenderTarget;
 
 class ContainerLayerComposite : public ContainerLayer,
                                 public LayerComposite
 {
   template<class ContainerT>
   friend void ContainerRender(ContainerT* aContainer,
                               LayerManagerComposite* aManager,
                               const nsIntRect& aClipRect);
@@ -48,16 +49,20 @@ public:
   virtual void CleanupResources() MOZ_OVERRIDE;
 
   virtual LayerComposite* AsLayerComposite() MOZ_OVERRIDE { return this; }
 
   // container layers don't use a compositable
   CompositableHost* GetCompositableHost() MOZ_OVERRIDE { return nullptr; }
 
   virtual const char* Name() const MOZ_OVERRIDE { return "ContainerLayerComposite"; }
+
+private:
+  RefPtr<CompositingRenderTarget> mCacheSurface;
+  gfx::IntRect mCacheSurfaceRect;
 };
 
 class RefLayerComposite : public RefLayer,
                           public LayerComposite
 {
   template<class ContainerT>
   friend void ContainerRender(ContainerT* aContainer,
                               LayerManagerComposite* aManager,
@@ -83,14 +88,18 @@ public:
   virtual void CleanupResources() MOZ_OVERRIDE;
 
   virtual LayerComposite* AsLayerComposite() MOZ_OVERRIDE { return this; }
 
   // ref layers don't use a compositable
   CompositableHost* GetCompositableHost() MOZ_OVERRIDE { return nullptr; }
 
   virtual const char* Name() const MOZ_OVERRIDE { return "RefLayerComposite"; }
+
+private:
+  RefPtr<CompositingRenderTarget> mCacheSurface;
+  gfx::IntRect mCacheSurfaceRect;
 };
 
 } /* layers */
 } /* mozilla */
 
 #endif /* GFX_ContainerLayerComposite_H */
diff --git a/widget/gonk/libdisplay/GonkDisplayJB.cpp b/widget/gonk/libdisplay/GonkDisplayJB.cpp
--- a/widget/gonk/libdisplay/GonkDisplayJB.cpp
+++ b/widget/gonk/libdisplay/GonkDisplayJB.cpp
@@ -249,16 +249,17 @@ GonkDisplayJB::Post(buffer_handle_t buf,
     mList->hwLayers[1].handle = buf;
     mList->hwLayers[1].transform = 0;
     mList->hwLayers[1].blending = HWC_BLENDING_PREMULT;
     mList->hwLayers[1].sourceCrop = r;
     mList->hwLayers[1].displayFrame = r;
     mList->hwLayers[1].visibleRegionScreen.numRects = 1;
     mList->hwLayers[1].visibleRegionScreen.rects = &mList->hwLayers[1].sourceCrop;
     mList->hwLayers[1].acquireFenceFd = fence;
+    //mList->hwLayers[1].acquireFenceFd = -1;
     mList->hwLayers[1].releaseFenceFd = -1;
 #if ANDROID_VERSION == 18
     mList->hwLayers[1].planeAlpha = 0xFF;
 #endif
     mHwc->prepare(mHwc, HWC_NUM_DISPLAY_TYPES, displays);
     int err = mHwc->set(mHwc, HWC_NUM_DISPLAY_TYPES, displays);
     mFBSurface->setReleaseFenceFd(mList->hwLayers[1].releaseFenceFd);
     if (mList->retireFenceFd >= 0)
