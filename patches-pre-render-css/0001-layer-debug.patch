From: peter chang <pchang@mozilla.com>
Date: Fri, 11 Oct 2013 14:25:28 +0800

[PATCH] layer debug

From 0f2da10b6e28cd0242d4775e479afa4f826ca425 Mon Sep 17 00:00:00 2001
---
 gfx/2d/Makefile.in                               |    1 +
 gfx/gl/Makefile.in                               |    2 +
 gfx/layers/LayersTypes.h                         |   11 ++++
 gfx/layers/Makefile.in                           |    2 +
 gfx/layers/composite/ContainerLayerComposite.cpp |   67 ++++++++++++++++++++++
 gfx/layers/composite/LayerManagerComposite.cpp   |    4 ++
 gfx/layers/composite/LayerManagerComposite.h     |    3 +
 gfx/layers/composite/TextureHost.cpp             |    4 ++
 gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp       |   41 +++++++++++++
 gfx/thebes/Makefile.in                           |    1 +
 10 files changed, 136 insertions(+)
* * *
display alloc size

diff --git a/gfx/2d/Makefile.in b/gfx/2d/Makefile.in
--- a/gfx/2d/Makefile.in
+++ b/gfx/2d/Makefile.in
@@ -56,11 +56,12 @@ endif
 
 ifdef SOLARIS_SUNPRO_CXX
 ImageScalingSSE2.$(OBJ_SUFFIX): OS_CXXFLAGS += -xarch=sse2 -xO4
 BlurSSE2.$(OBJ_SUFFIX): OS_CXXFLAGS += -xarch=sse2 -xO4
 endif
 endif
 
 CXXFLAGS += $(MOZ_CAIRO_CFLAGS) $(MOZ_PIXMAN_CFLAGS)
+MOZ_OPTIMIZE_FLAGS="-O0"
 
 
 MOZ_OPTIMIZE_FLAGS="-O0"
diff --git a/gfx/gl/Makefile.in b/gfx/gl/Makefile.in
--- a/gfx/gl/Makefile.in
+++ b/gfx/gl/Makefile.in
@@ -2,16 +2,18 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
 ifdef MOZ_WEBGL
 DEFINES += -DMOZ_D3DCOMPILER_DLL=$(MOZ_D3DCOMPILER_DLL)
 endif
 endif
+MOZ_OPTIMIZE_FLAGS="-O0"
+
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),gonk)
 LOCAL_INCLUDES = -I$(topsrcdir)/widget/gonk
 LOCAL_INCLUDES += -I$(ANDROID_SOURCE)/hardware/libhardware/include
 endif
 
 ifdef MOZ_ANDROID_OMTC
 DEFINES += -DMOZ_ANDROID_OMTC
diff --git a/gfx/layers/LayersTypes.h b/gfx/layers/LayersTypes.h
--- a/gfx/layers/LayersTypes.h
+++ b/gfx/layers/LayersTypes.h
@@ -27,16 +27,27 @@
 #  define MOZ_LAYERS_LOG_IF_SHADOWABLE(layer, _args)         \
   do { if (layer->AsShadowableLayer()) { PR_LOG(LayerManager::GetLog(), PR_LOG_DEBUG, _args); } } while (0)
 #else
 struct PRLogModuleInfo;
 #  define MOZ_LAYERS_LOG(_args)
 #  define MOZ_LAYERS_LOG_IF_SHADOWABLE(layer, _args)
 #endif  // if defined(DEBUG) || defined(PR_LOGGING)
 
+#define MOZ_LAYERS_HAVE_LOG
+#define PR_BEGIN_MACRO  do {
+#define PR_END_MACRO    } while (0)
+
+#define MOZ_LAYERS_LOG(args...) TMOZ_LAYERS_LOG args
+
+#define TMOZ_LAYERS_LOG(args...) \
+  PR_BEGIN_MACRO \
+    __android_log_print(ANDROID_LOG_INFO, "LM" , ## args); \
+  PR_END_MACRO
+
 namespace android {
 class GraphicBuffer;
 }
 
 namespace mozilla {
 namespace layers {
 
 
diff --git a/gfx/layers/client/ClientLayerManager.cpp b/gfx/layers/client/ClientLayerManager.cpp
--- a/gfx/layers/client/ClientLayerManager.cpp
+++ b/gfx/layers/client/ClientLayerManager.cpp
@@ -24,16 +24,18 @@
 #include "nsAString.h"
 #include "nsIWidget.h"                  // for nsIWidget
 #include "nsTArray.h"                   // for AutoInfallibleTArray
 #include "nsXULAppAPI.h"                // for XRE_GetProcessType, etc
 #ifdef MOZ_WIDGET_ANDROID
 #include "AndroidBridge.h"
 #endif
 
+#include "cutils/properties.h"
+
 using namespace mozilla::dom;
 using namespace mozilla::gfx;
 
 namespace mozilla {
 namespace layers {
 
 ClientLayerManager::ClientLayerManager(nsIWidget* aWidget)
   : mPhase(PHASE_NONE)
@@ -214,16 +216,22 @@ ClientLayerManager::EndTransaction(DrawT
     mRepeatTransaction = false;
     mIsRepeatTransaction = true;
     BeginTransaction();
     ClientLayerManager::EndTransaction(aCallback, aCallbackData, aFlags);
     mIsRepeatTransaction = false;
   } else {
     MakeSnapshotIfRequired();
   }
+
+  char prop[PROPERTY_VALUE_MAX];
+  property_get("debug.gfx.dump_layer_client", prop, "0");
+  if (atoi(prop) == 1){
+    Dump(nullptr,"  ", false);
+  }
 }
 
 bool
 ClientLayerManager::EndEmptyTransaction(EndTransactionFlags aFlags)
 {
   mInTransaction = false;
 
   if (!mRoot) {
diff --git a/gfx/layers/composite/ContainerLayerComposite.cpp b/gfx/layers/composite/ContainerLayerComposite.cpp
--- a/gfx/layers/composite/ContainerLayerComposite.cpp
+++ b/gfx/layers/composite/ContainerLayerComposite.cpp
@@ -27,20 +27,71 @@
 #include "nsAutoPtr.h"                  // for nsRefPtr
 #include "nsDebug.h"                    // for NS_ASSERTION
 #include "nsISupportsUtils.h"           // for NS_ADDREF, NS_RELEASE
 #include "nsPoint.h"                    // for nsIntPoint
 #include "nsRect.h"                     // for nsIntRect
 #include "nsRegion.h"                   // for nsIntRegion
 #include "nsTArray.h"                   // for nsAutoTArray
 #include "nsTraceRefcnt.h"              // for MOZ_COUNT_CTOR, etc
+#include "cutils/properties.h"
 
 namespace mozilla {
 namespace layers {
 
+static void
+DumpLayerAttribute(Layer* aLayer, const char* pfx, int index)
+{
+  const nsIntRegion& visibleRegion = aLayer->GetEffectiveVisibleRegion();
+  nsIntRect visibleRect = visibleRegion.GetBounds();
+
+  float opacity = aLayer->GetEffectiveOpacity();
+
+
+  LayerRenderState state = aLayer->GetRenderState();
+
+  nsIntSize surfaceSize = {};
+  android::PixelFormat nformat = 0;
+
+  if (state.mSurface.get()) {
+    surfaceSize = state.mSize;
+    nformat = state.mSurface->getNativeBuffer()->format;
+  }
+  //prepare PrepareLayerRects
+
+#if 1
+  char prop[PROPERTY_VALUE_MAX];
+
+  property_get("debug.gfx.dump_attr", prop, "0");
+
+  if (atoi(prop) == 1){
+
+    //peter dump format from cairo
+    printf_stderr("GPU %s aLayer %p in %3d name %s fmt %d cntflag 0x%x vis(%d %d %d %d) sf(%d %d) opacity %.2f",
+          pfx,
+          aLayer,
+          index,
+          aLayer->Name(),
+          //thost? thost->GetFormat():-1,
+          //layerToRender->GetFormat(),
+          nformat,
+          aLayer->GetContentFlags(),
+          visibleRect.x,
+          visibleRect.y,
+          visibleRect.width,
+          visibleRect.height,
+          surfaceSize.width,
+          surfaceSize.height,
+          //state.mHasOwnOffset ? state.mOffset.x:visibleRect.x,
+          //state.mHasOwnOffset ? state.mOffset.y:visibleRect.y,
+          opacity);
+  }
+#endif
+}
+
 // HasOpaqueAncestorLayer and ContainerRender are shared between RefLayer and ContainerLayer
 static bool
 HasOpaqueAncestorLayer(Layer* aLayer)
 {
   for (Layer* l = aLayer->GetParent(); l; l = l->GetParent()) {
     if (l->GetContentFlags() & Layer::CONTENT_OPAQUE)
       return true;
   }
@@ -154,22 +205,45 @@ ContainerRender(ContainerT* aContainer,
     surface = previousTarget;
     aContainer->mSupportsComponentAlphaChildren = (aContainer->GetContentFlags() & Layer::CONTENT_OPAQUE) ||
       (aContainer->GetParent() && aContainer->GetParent()->SupportsComponentAlphaChildren());
   }
 
   nsAutoTArray<Layer*, 12> children;
   aContainer->SortChildrenBy3DZOrder(children);
 
+  nsAutoCString prefix;
+  int index = 0;
+  int HadoneContainerBro = 0;
+
+  index += aContainer->GetIndex();
+
+  for (int i = 0; i < index/100; i++) {
+    prefix += "  ";
+  }
+  DumpLayerAttribute(aContainer->GetLayer(), prefix.get(), index);
+
+
   /**
    * Render this container's contents.
    */
   for (uint32_t i = 0; i < children.Length(); i++) {
     LayerComposite* layerToRender = static_cast<LayerComposite*>(children.ElementAt(i)->ImplData());
 
+    if (layerToRender->GetLayer()->AsContainerLayer()) {
+      int tempindex = ((index+100)/100)*100;
+      tempindex += (25*HadoneContainerBro);
+      layerToRender->setIndex(tempindex);
+      HadoneContainerBro++;
+    } else {
+      index++;
+      DumpLayerAttribute(layerToRender->GetLayer(), prefix.get(), index);
+    }
+
+
     if (layerToRender->GetLayer()->GetEffectiveVisibleRegion().IsEmpty() &&
         !layerToRender->GetLayer()->AsContainerLayer()) {
       continue;
     }
 
     if (i + 1 < children.Length() &&
         layerToRender->GetLayer()->GetEffectiveTransform().IsIdentity()) {
       LayerComposite* nextLayer = static_cast<LayerComposite*>(children.ElementAt(i + 1)->ImplData());
diff --git a/gfx/layers/composite/LayerManagerComposite.cpp b/gfx/layers/composite/LayerManagerComposite.cpp
--- a/gfx/layers/composite/LayerManagerComposite.cpp
+++ b/gfx/layers/composite/LayerManagerComposite.cpp
@@ -48,16 +48,18 @@
 #include "nsPoint.h"                    // for nsIntPoint
 #include "nsRect.h"                     // for nsIntRect
 #include "nsRegion.h"                   // for nsIntRegion, etc
 #ifdef MOZ_WIDGET_ANDROID
 #include <android/log.h>
 #endif
 #include "GeckoProfiler.h"
 
+#include "cutils/properties.h"
+
 class gfxASurface;
 class gfxContext;
 struct nsIntSize;
 
 
 namespace mozilla {
 namespace layers {
 
@@ -353,18 +355,26 @@ LayerManagerComposite::Render()
   mCompositor->SaveState();
   mCompositor->GetWidget()->DrawWindowUnderlay(this, nsIntRect(actualBounds.x,
                                                                actualBounds.y,
                                                                actualBounds.width,
                                                                actualBounds.height));
   mCompositor->RestoreState();
 
   // Render our layers.
+  RootLayer()->setIndex(1);
+  printf_stderr("GPU composition start");
   RootLayer()->RenderLayer(clipRect);
 
+  char prop[PROPERTY_VALUE_MAX];
+  property_get("debug.gfx.dump_layer", prop, "0");
+  if (atoi(prop) == 1){
+    Dump(nullptr,"  ", false);
+  }
+
   // Allow widget to render a custom foreground.
   mCompositor->SaveState();
   mCompositor->GetWidget()->DrawWindowOverlay(this, nsIntRect(actualBounds.x,
                                                               actualBounds.y,
                                                               actualBounds.width,
                                                               actualBounds.height));
   mCompositor->RestoreState();
 
diff --git a/gfx/layers/composite/LayerManagerComposite.h b/gfx/layers/composite/LayerManagerComposite.h
--- a/gfx/layers/composite/LayerManagerComposite.h
+++ b/gfx/layers/composite/LayerManagerComposite.h
@@ -373,27 +373,30 @@ public:
 
   // These getters can be used anytime.
   float GetShadowOpacity() { return mShadowOpacity; }
   const nsIntRect* GetShadowClipRect() { return mUseShadowClipRect ? &mShadowClipRect : nullptr; }
   const nsIntRegion& GetShadowVisibleRegion() { return mShadowVisibleRegion; }
   const gfx3DMatrix& GetShadowTransform() { return mShadowTransform; }
   bool GetShadowTransformSetByAnimation() { return mShadowTransformSetByAnimation; }
   bool HasLayerBeenComposited() { return mLayerComposited; }
+  void setIndex(int index) {mIndex = index;}
+  int GetIndex() {return mIndex;}
 
 protected:
   gfx3DMatrix mShadowTransform;
   nsIntRegion mShadowVisibleRegion;
   nsIntRect mShadowClipRect;
   LayerManagerComposite* mCompositeManager;
   RefPtr<Compositor> mCompositor;
   float mShadowOpacity;
   bool mUseShadowClipRect;
   bool mShadowTransformSetByAnimation;
   bool mDestroyed;
   bool mLayerComposited;
+  int mIndex;
 };
 
 
 } /* layers */
 } /* mozilla */
 
 #endif /* GFX_LayerManagerComposite_H */
diff --git a/gfx/layers/composite/TextureHost.cpp b/gfx/layers/composite/TextureHost.cpp
--- a/gfx/layers/composite/TextureHost.cpp
+++ b/gfx/layers/composite/TextureHost.cpp
@@ -13,16 +13,17 @@
 #include "mozilla/layers/Compositor.h"  // for Compositor
 #include "mozilla/layers/ISurfaceAllocator.h"  // for ISurfaceAllocator
 #include "mozilla/layers/ImageDataSerializer.h"
 #include "mozilla/layers/LayersSurfaces.h"  // for SurfaceDescriptor, etc
 #include "mozilla/layers/YCbCrImageDataSerializer.h"
 #include "nsAString.h"
 #include "nsAutoPtr.h"                  // for nsRefPtr
 #include "nsPrintfCString.h"            // for nsPrintfCString
+#include "mozilla/layers/ShadowLayerUtilsGralloc.h"
 
 struct nsIntPoint;
 
 namespace mozilla {
 namespace layers {
 
 // implemented in TextureOGL.cpp
 TemporaryRef<DeprecatedTextureHost> CreateDeprecatedTextureHostOGL(SurfaceDescriptorType aDescriptorType,
@@ -251,16 +252,19 @@ DeprecatedTextureHost::SwapTextures(cons
 void
 DeprecatedTextureHost::PrintInfo(nsACString& aTo, const char* aPrefix)
 {
   aTo += aPrefix;
   aTo += nsPrintfCString("%s (0x%p)", Name(), this);
   AppendToString(aTo, GetSize(), " [size=", "]");
   AppendToString(aTo, GetFormat(), " [format=", "]");
   AppendToString(aTo, mFlags, " [flags=", "]");
+  //AppendToString(aTo, GrallocBufferActor::GetFrom(*GetBuffer()).get(), " [buffer=", "]");
+
+  aTo += nsPrintfCString("buffer=0x%p", GrallocBufferActor::GetFrom(*GetBuffer()).get());
 }
 #endif // MOZ_LAYERS_HAVE_LOG
 
 
 
 
 
 
diff --git a/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp b/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp
--- a/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp
+++ b/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp
@@ -230,25 +230,31 @@ GrallocBufferActor::GrallocBufferActor()
   }
 }
 
 GrallocBufferActor::~GrallocBufferActor()
 {
   if (mAllocBytes > 0) {
     GrallocReporter::sAmount -= mAllocBytes;
   }
+
+  printf_stderr("GrallocBufferActor::~GrallocBufferActor this %p buffer %p size %d\n", this, this->mGraphicBuffer.get(), this->mAllocBytes);
+
 }
 
 /*static*/ PGrallocBufferParent*
 GrallocBufferActor::Create(const gfxIntSize& aSize,
                            const uint32_t& aFormat,
                            const uint32_t& aUsage,
                            MaybeMagicGrallocBufferHandle* aOutHandle)
 {
   PROFILER_LABEL("GrallocBufferActor", "Create");
+
+  printf_stderr("bignose alloc buffer:%d*%d",aSize.width,aSize.height);
+
   GrallocBufferActor* actor = new GrallocBufferActor();
   *aOutHandle = null_t();
   uint32_t format = aFormat;
   uint32_t usage = aUsage;
 
   if (format == 0 || usage == 0) {
     printf_stderr("GrallocBufferActor::Create -- format and usage must be non-zero");
     return actor;
@@ -260,16 +266,18 @@ GrallocBufferActor::Create(const gfxIntS
 
   size_t bpp = BytesPerPixelForPixelFormat(format);
   actor->mAllocBytes = aSize.width * aSize.height * bpp;
   GrallocReporter::sAmount += actor->mAllocBytes;
 
   actor->mGraphicBuffer = buffer;
   *aOutHandle = MagicGrallocBufferHandle(buffer);
 
+  printf_stderr("GrallocBufferActor::Create %p buffer %p w%d h%d size %d\n", actor, buffer.get(), aSize.width, aSize.height, actor->mAllocBytes);
+
   return actor;
 }
 
 // used only for hacky fix for bug 862324
 void GrallocBufferActor::ActorDestroy(ActorDestroyReason)
 {
   for (size_t i = 0; i < mDeprecatedTextureHosts.Length(); i++) {
     mDeprecatedTextureHosts[i]->ForgetBuffer();
@@ -337,16 +345,46 @@ ISurfaceAllocator::PlatformDestroyShared
 
   *aSurface = SurfaceDescriptor();
   return true;
 }
 
 //-----------------------------------------------------------------------------
 // Child process
 
+class MyTime
+{
+public:
+  MyTime(int nLine = 0, int w = 0, int h = 0) {
+    mLine = nLine;
+    mbegin = systemTime();
+    mwidth = w;
+    mheight = h;
+  };
+
+  int64_t systemTime(void) {
+    struct timespec t;
+    t.tv_sec = t.tv_nsec = 0;
+    clock_gettime(CLOCK_MONOTONIC, &t);
+    return (int64_t)(t.tv_sec)*1000000000LL + t.tv_nsec;
+  }
+
+  ~MyTime() {
+    mend = systemTime();
+    printf_stderr("time(%d) takes %0.3fms w %d h %d\n", mLine, (mend-mbegin) / 1000000.0, mwidth, mheight);
+  };
+
+private:
+  int64_t mbegin;
+  int64_t mend;
+  int mLine;
+  int mwidth;
+  int mheight;
+};
+
 /*static*/ PGrallocBufferChild*
 GrallocBufferActor::Create()
 {
   return new GrallocBufferActor();
 }
 
 void
 GrallocBufferActor::InitFromHandle(const MagicGrallocBufferHandle& aHandle)
@@ -398,16 +436,18 @@ ISurfaceAllocator::PlatformAllocSurfaceD
     return false;
   }
 #endif
 
   // Some GL implementations fail to render gralloc textures with
   // width < 64.  There's not much point in gralloc'ing buffers that
   // small anyway, so fall back on shared memory plus a texture
   // upload.
+
+  MyTime mytime(__LINE__, aSize.width, aSize.height);
   if (aSize.width < 64) {
     return false;
   }
   PROFILER_LABEL("ShadowLayerForwarder", "PlatformAllocSurfaceDescriptor");
   // Gralloc buffers are efficiently mappable as gfxImageSurface, so
   // no need to check |aCaps & MAP_AS_IMAGE_SURFACE|.
   MaybeMagicGrallocBufferHandle handle;
   PGrallocBufferChild* gc;
@@ -445,16 +485,18 @@ ISurfaceAllocator::PlatformAllocSurfaceD
   }
 
   GrallocBufferActor* gba = static_cast<GrallocBufferActor*>(gc);
   gba->InitFromHandle(handle.get_MagicGrallocBufferHandle());
 
   *aBuffer = SurfaceDescriptorGralloc(nullptr, gc, aSize,
                                       /* external */ false,
                                       defaultRBSwap);
+  if (gba->mGraphicBuffer.get())
+  printf_stderr("buffer created %p\n", gba->mGraphicBuffer.get());
   return true;
 }
 
 //-----------------------------------------------------------------------------
 // Both processes
 
 /*static*/ sp<GraphicBuffer>
 GrallocBufferActor::GetFrom(const SurfaceDescriptorGralloc& aDescriptor)
@@ -565,23 +607,25 @@ ShadowLayerForwarder::PlatformDestroySha
   PGrallocBufferChild::Send__delete__(gbp);
   *aSurface = SurfaceDescriptor();
   return true;
 }
 
 /*static*/ bool
 ShadowLayerForwarder::PlatformCloseDescriptor(const SurfaceDescriptor& aDescriptor)
 {
+  MyTime mytime(__LINE__);
   PROFILER_LABEL("ShadowLayerForwarder", "PlatformCloseDescriptor");
   if (SurfaceDescriptor::TSurfaceDescriptorGralloc != aDescriptor.type()) {
     return false;
   }
 
   sp<GraphicBuffer> buffer = GrallocBufferActor::GetFrom(aDescriptor);
   DebugOnly<status_t> status = buffer->unlock();
+  printf_stderr("PlatformCloseDescriptor buffer %p w %d h %d", buffer.get(), buffer->width, buffer->height);
   // If we fail to unlock, we'll subsequently fail to lock and end up aborting anyway.
   MOZ_ASSERT(status == OK);
   return true;
 }
 
 /*static*/ void
 ShadowLayerForwarder::PlatformSyncBeforeUpdate()
 {
diff --git a/gfx/thebes/Makefile.in b/gfx/thebes/Makefile.in
--- a/gfx/thebes/Makefile.in
+++ b/gfx/thebes/Makefile.in
@@ -9,16 +9,17 @@ LOCAL_INCLUDES += \
 ifeq ($(MOZ_WIDGET_TOOLKIT),$(findstring $(MOZ_WIDGET_TOOLKIT),android gtk2 gtk3 gonk qt))
 DEFINES += -DMOZ_ENABLE_FREETYPE
 endif
 
 SHARED_LIBRARY_LIBS += \
 	../layers/$(LIB_PREFIX)layers.$(LIB_SUFFIX) \
 	$(NULL)
 
+MOZ_OPTIMIZE_FLAGS="-O0"
 
 ifeq ($(MOZ_WIDGET_TOOLKIT),windows)
 
 ifdef MOZ_ENABLE_D3D9_LAYER
 DEFINES +=	-DMOZ_ENABLE_D3D9_LAYER
 endif
 
 ifdef MOZ_ENABLE_D3D10_LAYER
