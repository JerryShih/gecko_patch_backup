# HG changeset patch
# Parent 5533dc5242277e5b879360cfbfea5e0091b153eb
# User Jerry Shih <hshih@mozilla.com>

diff --git a/content/canvas/src/WebGLContext.cpp b/content/canvas/src/WebGLContext.cpp
--- a/content/canvas/src/WebGLContext.cpp
+++ b/content/canvas/src/WebGLContext.cpp
@@ -235,16 +235,17 @@ WebGLContext::DestroyResourcesAndContext
                                             "memory-pressure");
         }
         mMemoryPressureObserver = nullptr;
     }
 
     if (!gl)
         return;
 
+    printf_stderr("bignose WebGLContext::DestroyResourcesAndContext, gl=%p, pid=%d, tid=%d",gl.get(),getpid(),gettid());
     gl->MakeCurrent();
 
     mBound2DTextures.Clear();
     mBoundCubeMapTextures.Clear();
     mBoundArrayBuffer = nullptr;
     mBoundTransformFeedbackBuffer = nullptr;
     mCurrentProgram = nullptr;
     mBoundFramebuffer = nullptr;
diff --git a/content/canvas/src/WebGLContext.h b/content/canvas/src/WebGLContext.h
--- a/content/canvas/src/WebGLContext.h
+++ b/content/canvas/src/WebGLContext.h
@@ -252,17 +252,23 @@ public:
     void TerminateContextLossTimer();
 
     // WebIDL WebGLRenderingContext API
     dom::HTMLCanvasElement* GetCanvas() const { return mCanvasElement; }
     GLsizei DrawingBufferWidth() const { return IsContextLost() ? 0 : mWidth; }
     GLsizei DrawingBufferHeight() const { return IsContextLost() ? 0 : mHeight; }
 
     void GetContextAttributes(dom::Nullable<dom::WebGLContextAttributes>& retval);
-    bool IsContextLost() const { return mContextStatus != ContextNotLost; }
+
+    bool IsContextLost() const
+    {
+      printf_stderr("bignose context:%p IsContextLost=%d",(gl?gl.get():nullptr),(int)(mContextStatus != ContextNotLost));
+      return mContextStatus != ContextNotLost;
+    }
+
     void GetSupportedExtensions(JSContext *cx, dom::Nullable< nsTArray<nsString> > &retval);
     JSObject* GetExtension(JSContext* cx, const nsAString& aName, ErrorResult& rv);
     void ActiveTexture(GLenum texture);
     void AttachShader(WebGLProgram* program, WebGLShader* shader);
     void BindAttribLocation(WebGLProgram* program, GLuint location,
                             const nsAString& name);
     void BindFramebuffer(GLenum target, WebGLFramebuffer* wfb);
     void BindRenderbuffer(GLenum target, WebGLRenderbuffer* wrb);
