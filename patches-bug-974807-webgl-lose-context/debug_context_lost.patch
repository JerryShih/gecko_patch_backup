# HG changeset patch
# Parent b6acc2c78b1808fb9ca9a6eb5ece27e7e6c8393a
# User Jerry Shih <hshih@mozilla.com>
debug webgl context lost


diff --git a/content/canvas/src/WebGLContext.cpp b/content/canvas/src/WebGLContext.cpp
--- a/content/canvas/src/WebGLContext.cpp
+++ b/content/canvas/src/WebGLContext.cpp
@@ -223,17 +223,17 @@ WebGLContext::~WebGLContext()
     WebGLMemoryTracker::RemoveWebGLContext(this);
     TerminateContextLossTimer();
     mContextRestorer = nullptr;
 }
 
 void
 WebGLContext::DestroyResourcesAndContext()
 {
-    printf_stderr("bignose WebGLContext::DestroyResourcesAndContext");
+    //printf_stderr("bignose WebGLContext::DestroyResourcesAndContext");
 
     if (mMemoryPressureObserver) {
         nsCOMPtr<nsIObserverService> observerService
             = mozilla::services::GetObserverService();
         if (observerService) {
             observerService->RemoveObserver(mMemoryPressureObserver,
                                             "memory-pressure");
         }
@@ -896,30 +896,30 @@ private:
 } // end namespace mozilla
 
 already_AddRefed<layers::CanvasLayer>
 WebGLContext::GetCanvasLayer(nsDisplayListBuilder* aBuilder,
                              CanvasLayer *aOldLayer,
                              LayerManager *aManager)
 {
     if (IsContextLost()){
-        printf_stderr("bignose WebGLContext::GetCanvasLayer IsContextLost()");
+        //printf_stderr("bignose WebGLContext::GetCanvasLayer IsContextLost()");
         return nullptr;
     }
 
     if (!mResetLayer && aOldLayer &&
         aOldLayer->HasUserData(&gWebGLLayerUserData)) {
         nsRefPtr<layers::CanvasLayer> ret = aOldLayer;
         return ret.forget();
     }
 
     nsRefPtr<CanvasLayer> canvasLayer = aManager->CreateCanvasLayer();
     if (!canvasLayer) {
         NS_WARNING("CreateCanvasLayer returned null!");
-        printf_stderr("bignose WebGLContext::GetCanvasLayer CreateCanvasLayer returned null");
+        //printf_stderr("bignose WebGLContext::GetCanvasLayer CreateCanvasLayer returned null");
 
         return nullptr;
     }
     WebGLContextUserData *userData = nullptr;
     if (aBuilder->IsPaintingToWindow()) {
       // Make the layer tell us whenever a transaction finishes (including
       // the current transaction), so we can clear our invalidation state and
       // start invalidating again. We need to do this for the layer that is
@@ -1253,54 +1253,57 @@ WebGLContext::RobustnessTimerCallback(ns
         // the canvas is gone. That happens when the page was closed before we got
         // this timer event. In this case, there's nothing to do here, just don't crash.
         return;
     }
 
     // If the context has been lost and we're waiting for it to be restored, do
     // that now.
     if (mContextStatus == ContextLostAwaitingEvent) {
-        printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextLostAwaitingEvent");
+        //printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextLostAwaitingEvent");
 
         bool defaultAction;
         nsContentUtils::DispatchTrustedEvent(mCanvasElement->OwnerDoc(),
                                              static_cast<nsIDOMHTMLCanvasElement*>(mCanvasElement),
                                              NS_LITERAL_STRING("webglcontextlost"),
                                              true,
                                              true,
                                              &defaultAction);
 
+        printf_stderr("bignose %p WebGLContext defaultAction:%d",this,(int)defaultAction);
+
         // If the script didn't handle the event, we don't allow restores.
         if (defaultAction)
             mAllowRestore = false;
 
         // If the script handled the event and we are allowing restores, then
         // mark it to be restored. Otherwise, leave it as context lost
         // (unusable).
         if (!defaultAction && mAllowRestore) {
             ForceRestoreContext();
             // Restart the timer so that it will be restored on the next
             // callback.
             SetupContextLossTimer();
+            printf_stderr("bignose %p WebGLContext::RobustnessTimerCallback ForceRestoreContext",this);
         } else {
             mContextStatus = ContextLost;
 
-            printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextLost");
+            //printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextLost");
         }
     } else if (mContextStatus == ContextLostAwaitingRestore) {
-        printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextLostAwaitingRestore");
+        //printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextLostAwaitingRestore");
 
         // Try to restore the context. If it fails, try again later.
         if (NS_FAILED(SetDimensions(mWidth, mHeight))) {
             SetupContextLossTimer();
-            printf_stderr("bignose WebGLContext::RobustnessTimerCallback restore the context failed");
+            //printf_stderr("bignose WebGLContext::RobustnessTimerCallback restore the context failed");
             return;
         }
         mContextStatus = ContextNotLost;
-        printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextNotLost");
+        //printf_stderr("bignose WebGLContext::RobustnessTimerCallback ContextNotLost");
         nsContentUtils::DispatchTrustedEvent(mCanvasElement->OwnerDoc(),
                                              static_cast<nsIDOMHTMLCanvasElement*>(mCanvasElement),
                                              NS_LITERAL_STRING("webglcontextrestored"),
                                              true,
                                              true);
         // Set all flags back to the state they were in before the context was
         // lost.
         mContextLostErrorSet = false;
diff --git a/content/canvas/src/WebGLContextLossTimer.cpp b/content/canvas/src/WebGLContextLossTimer.cpp
--- a/content/canvas/src/WebGLContextLossTimer.cpp
+++ b/content/canvas/src/WebGLContextLossTimer.cpp
@@ -13,17 +13,20 @@ WebGLContext::RobustnessTimerCallbackSta
 }
 
 void
 WebGLContext::SetupContextLossTimer() {
     // If the timer was already running, don't restart it here. Instead,
     // wait until the previous call is done, then fire it one more time.
     // This is an optimization to prevent unnecessary cross-communication
     // between threads.
+
+    printf_stderr("bignose WebGLContext::SetupContextLossTimer: obj:%p",this);
     if (mContextLossTimerRunning) {
+      printf_stderr("bignose WebGLContext::SetupContextLossTimer: obj:%p, mContextLossTimerRunning",this);
         mDrawSinceContextLossTimerSet = true;
         return;
     }
 
     mContextRestorer->InitWithFuncCallback(RobustnessTimerCallbackStatic,
                                             static_cast<void*>(this),
                                             1000,
                                             nsITimer::TYPE_ONE_SHOT);
diff --git a/content/html/content/src/HTMLCanvasElement.cpp b/content/html/content/src/HTMLCanvasElement.cpp
--- a/content/html/content/src/HTMLCanvasElement.cpp
+++ b/content/html/content/src/HTMLCanvasElement.cpp
@@ -906,17 +906,17 @@ HTMLCanvasElement::GetIsOpaque()
 }
 
 already_AddRefed<CanvasLayer>
 HTMLCanvasElement::GetCanvasLayer(nsDisplayListBuilder* aBuilder,
                                   CanvasLayer *aOldLayer,
                                   LayerManager *aManager)
 {
   if (!mCurrentContext){
-    printf_stderr("bignose HTMLCanvasElement::GetCanvasLayer, context is null");
+    //printf_stderr("bignose HTMLCanvasElement::GetCanvasLayer, context is null");
     return nullptr;
   }
 
   return mCurrentContext->GetCanvasLayer(aBuilder, aOldLayer, aManager);
 }
 
 bool
 HTMLCanvasElement::ShouldForceInactiveLayer(LayerManager *aManager)
diff --git a/dom/ipc/ProcessPriorityManager.cpp b/dom/ipc/ProcessPriorityManager.cpp
--- a/dom/ipc/ProcessPriorityManager.cpp
+++ b/dom/ipc/ProcessPriorityManager.cpp
@@ -1033,17 +1033,27 @@ ParticularProcessPriorityManager::SetPri
   mPriority = aPriority;
   mCPUPriority = aCPUPriority;
   hal::SetProcessPriority(Pid(), mPriority, mCPUPriority);
 
   if (oldPriority != mPriority) {
     unused << mContentParent->SendNotifyProcessPriorityChanged(mPriority);
   }
 
+  /*
+  if (aPriority >= PROCESS_PRIORITY_FOREGROUND) {
+    unused << mContentParent->SendCancelMinimizeMemoryUsage();
+  } else {
+    unused << mContentParent->SendMinimizeMemoryUsage();
+  }
+  */
+
   if (aPriority < PROCESS_PRIORITY_FOREGROUND) {
+    //printf_stderr("bignose SendFlushMemory");
+
     unused << mContentParent->SendFlushMemory(NS_LITERAL_STRING("low-memory"));
   }
 
   FireTestOnlyObserverNotification("process-priority-set",
     ProcessPriorityToString(mPriority, mCPUPriority));
 
   if (oldPriority != mPriority) {
     ProcessPriorityManagerImpl::GetSingleton()->
diff --git a/gfx/layers/client/CanvasClient.cpp b/gfx/layers/client/CanvasClient.cpp
--- a/gfx/layers/client/CanvasClient.cpp
+++ b/gfx/layers/client/CanvasClient.cpp
@@ -122,17 +122,17 @@ CanvasClientSurfaceStream::~CanvasClient
     int test;
     test=10;
   }
 }
 
 void
 CanvasClientSurfaceStream::Update(gfx::IntSize aSize, ClientCanvasLayer* aLayer)
 {
-  printf_stderr("bignose in CanvasClientSurfaceStream::Update");
+  //printf_stderr("bignose in CanvasClientSurfaceStream::Update");
 
   GLScreenBuffer* screen = aLayer->mGLContext->Screen();
   SurfaceStream* stream = screen->Stream();
 
   bool isCrossProcess = !(XRE_GetProcessType() == GeckoProcessType_Default);
   bool bufferCreated = false;
   if (isCrossProcess) {
 #ifdef MOZ_WIDGET_GONK
@@ -153,23 +153,23 @@ CanvasClientSurfaceStream::Update(gfx::I
     RefPtr<GrallocTextureClientOGL> grallocTextureClient =
       static_cast<GrallocTextureClientOGL*>(grallocSurf->GetTextureClient());
 
     // If IPDLActor is null means this TextureClient didn't AddTextureClient yet
     if (!grallocTextureClient->GetIPDLActor()) {
       grallocTextureClient->SetTextureFlags(mTextureInfo.mTextureFlags);
       AddTextureClient(grallocTextureClient);
 
-      printf_stderr("bignose in CanvasClientSurfaceStream::Update AddTextureClient");
+      //printf_stderr("bignose in CanvasClientSurfaceStream::Update AddTextureClient");
     }
 
     if (grallocTextureClient->GetIPDLActor()) {
       GetForwarder()->UseTexture(this, grallocTextureClient);
 
-      printf_stderr("bignose in CanvasClientSurfaceStream::Update UseTexture");
+      //printf_stderr("bignose in CanvasClientSurfaceStream::Update UseTexture");
     }
 #else
     printf_stderr("isCrossProcess, but not MOZ_WIDGET_GONK! Someone needs to write some code!");
     MOZ_ASSERT(false);
 #endif
   } else {
     if (!mBuffer) {
       StreamTextureClientOGL* textureClient =
diff --git a/gfx/layers/composite/CanvasLayerComposite.cpp b/gfx/layers/composite/CanvasLayerComposite.cpp
--- a/gfx/layers/composite/CanvasLayerComposite.cpp
+++ b/gfx/layers/composite/CanvasLayerComposite.cpp
@@ -29,33 +29,33 @@ using namespace mozilla::gfx;
 CanvasLayerComposite::CanvasLayerComposite(LayerManagerComposite* aManager)
   : CanvasLayer(aManager, nullptr)
   , LayerComposite(aManager)
   , mImageHost(nullptr)
 {
   MOZ_COUNT_CTOR(CanvasLayerComposite);
   mImplData = static_cast<LayerComposite*>(this);
 
-  printf_stderr("bignose CanvasLayerComposite::CanvasLayerComposite");
+  //printf_stderr("bignose CanvasLayerComposite::CanvasLayerComposite");
 }
 
 CanvasLayerComposite::~CanvasLayerComposite()
 {
   MOZ_COUNT_DTOR(CanvasLayerComposite);
 
   CleanupResources();
 
   char propValue[PROPERTY_VALUE_MAX];
   property_get("debug.bignose.test_canvas", propValue, "0");
   if(atoi(propValue) == 1){
     int test;
     test=10;
   }
 
-  printf_stderr("bignose CanvasLayerComposite::~CanvasLayerComposite");
+  //printf_stderr("bignose CanvasLayerComposite::~CanvasLayerComposite");
 }
 
 bool
 CanvasLayerComposite::SetCompositableHost(CompositableHost* aHost)
 {
   switch (aHost->GetType()) {
     case BUFFER_IMAGE_SINGLE:
     case BUFFER_IMAGE_BUFFERED:
@@ -81,20 +81,20 @@ CanvasLayerComposite::GetRenderState()
     return LayerRenderState();
   }
   return mImageHost->GetRenderState();
 }
 
 void
 CanvasLayerComposite::RenderLayer(const nsIntRect& aClipRect)
 {
-  printf_stderr("bignose CanvasLayerComposite::RenderLayer");
+  //printf_stderr("bignose CanvasLayerComposite::RenderLayer");
 
   if (!mImageHost || !mImageHost->IsAttached()) {
-    printf_stderr("bignose CanvasLayerComposite::RenderLayer, no mImageHost");
+    //printf_stderr("bignose CanvasLayerComposite::RenderLayer, no mImageHost");
     return;
   }
 
   mCompositor->MakeCurrent();
 
 #ifdef MOZ_DUMP_PAINTING
   if (gfxUtils::sDumpPainting) {
     RefPtr<gfx::DataSourceSurface> surf = mImageHost->GetAsSurface();
diff --git a/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp b/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp
--- a/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp
+++ b/gfx/layers/ipc/ShadowLayerUtilsGralloc.cpp
@@ -291,17 +291,17 @@ GrallocBufferActor::Create(const gfx::In
     return actor;
   }
 
   // If the requested size is too big (i.e. exceeds the commonly used max GL texture size)
   // then we risk OOMing the parent process. It's better to just deny the allocation and
   // kill the child process, which is what the following code does.
   // TODO: actually use GL_MAX_TEXTURE_SIZE instead of hardcoding 4096
   if (aSize.width > 4096 || aSize.height > 4096) {
-    printf_stderr("bignose GrallocBufferActor::Create -- requested gralloc buffer is too big:(%d,%d). Killing child instead.",aSize.width,aSize.height);
+    //printf_stderr("bignose GrallocBufferActor::Create -- requested gralloc buffer is too big:(%d,%d). Killing child instead.",aSize.width,aSize.height);
     delete actor;
     return nullptr;
   }
 
   sp<GraphicBuffer> buffer(new GraphicBuffer(aSize.width, aSize.height, format, usage));
   if (buffer->initCheck() != OK)
     return actor;
 
diff --git a/layout/generic/nsHTMLCanvasFrame.cpp b/layout/generic/nsHTMLCanvasFrame.cpp
--- a/layout/generic/nsHTMLCanvasFrame.cpp
+++ b/layout/generic/nsHTMLCanvasFrame.cpp
@@ -239,38 +239,38 @@ nsHTMLCanvasFrame::GetInnerArea() const
 }
 
 already_AddRefed<Layer>
 nsHTMLCanvasFrame::BuildLayer(nsDisplayListBuilder* aBuilder,
                               LayerManager* aManager,
                               nsDisplayItem* aItem,
                               const ContainerLayerParameters& aContainerParameters)
 {
-  printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer");
+  //printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer");
 
   nsRect area = GetContentRect() - GetPosition() + aItem->ToReferenceFrame();
   HTMLCanvasElement* element = static_cast<HTMLCanvasElement*>(GetContent());
   nsIntSize canvasSize = GetCanvasSize();
 
   nsPresContext* presContext = PresContext();
   element->HandlePrintCallback(presContext->Type());
 
   if (canvasSize.width <= 0 || canvasSize.height <= 0 || area.IsEmpty()){
-    printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer canvasSize.width <= 0 || canvasSize.height <= 0 || area.IsEmpty()");
+    //printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer canvasSize.width <= 0 || canvasSize.height <= 0 || area.IsEmpty()");
     return nullptr;
   }
 
   CanvasLayer* oldLayer = static_cast<CanvasLayer*>
     (aManager->GetLayerBuilder()->GetLeafLayerFor(aBuilder, aItem));
 
-  printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer oldlayer:%p",oldLayer);
+  //printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer oldlayer:%p",oldLayer);
 
   nsRefPtr<CanvasLayer> layer = element->GetCanvasLayer(aBuilder, oldLayer, aManager);
   if (!layer){
-    printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer GetCanvasLayer() is null ");
+    //printf_stderr("bignose nsHTMLCanvasFrame::BuildLayer GetCanvasLayer() is null ");
     return nullptr;
   }
 
   gfxRect r = gfxRect(presContext->AppUnitsToGfxUnits(area.x),
                       presContext->AppUnitsToGfxUnits(area.y),
                       presContext->AppUnitsToGfxUnits(area.width),
                       presContext->AppUnitsToGfxUnits(area.height));
 
